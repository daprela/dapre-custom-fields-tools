/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/controller.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/controller.js":
/*!******************************!*\
  !*** ./src/js/controller.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tab_navigation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tab-navigation.js */ "./src/js/tab-navigation.js");
/* harmony import */ var _tab_navigation_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tab_navigation_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _meta_box_ui_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./meta-box-ui.js */ "./src/js/meta-box-ui.js");
/* harmony import */ var _copy_meta_ui_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./copy-meta-ui.js */ "./src/js/copy-meta-ui.js");
/* harmony import */ var _copy_meta_ui_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_copy_meta_ui_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _option_meta_actions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./option-meta-actions.js */ "./src/js/option-meta-actions.js");
/* eslint-disable import/extensions */



 // const { __, _n } = wp.i18n;

/***/ }),

/***/ "./src/js/copy-meta-ui.js":
/*!********************************!*\
  !*** ./src/js/copy-meta-ui.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* eslint-disable func-names */
// const { apiFetch } = wp;
var copyOptionSection = document.querySelector('.js-copyOptionTo');
var copyUserMetaSection = document.querySelector('.js-copyUserFieldTo');
var copyPostMetaSection = document.querySelector('.js-copyPostFieldTo');
/* Get elements in the option tab */

var optionToUserField = document.querySelector('.js-optionToUserField');
var optionToOption = document.querySelector('.js-optionToOption');
var optionToPostField = document.querySelector('.js-optionToPostField');
/* Get elements in the user fields tab */

var userFieldToUserField = document.querySelector('.js-userFieldToUserField');
var userFieldToOption = document.querySelector('.js-userFieldToOption');
var userFieldToPostField = document.querySelector('.js-userFieldToPostField');
/* Get elements in the post fields tab */

var postFieldToUserField = document.querySelector('.js-postFieldToUserField');
var postFieldToOption = document.querySelector('.js-postFieldToOption');
var postFieldToPostField = document.querySelector('.js-postFieldToPostField');
/**
 * Slide up a box
 * @param element Element or box to slide up
 */

function slideUp(element) {
  element.classList.remove('is-open');
}
/**
 * Slide down a box
 * @param element Element or box to slide down
 */


function slideDown(element) {
  element.classList.add('is-open');
}
/* Select where to copy the option field */


var copyOptionDestinations = function copyOptionDestinations(e) {
  var element = e.target;

  if (element.value === 'option') {
    slideUp(optionToUserField);
    slideUp(optionToPostField);
    slideDown(optionToOption);
  }

  if (element.value === 'user field') {
    slideUp(optionToOption);
    slideUp(optionToPostField);
    slideDown(optionToUserField);
  }

  if (element.value === 'post field') {
    slideUp(optionToUserField);
    slideUp(optionToOption);
    slideDown(optionToPostField);
  }
};
/* Select where to copy the user field */


var copyUserFieldDestination = function copyUserFieldDestination(e) {
  var element = e.target;

  if (element.value === 'option') {
    slideUp(userFieldToUserField);
    slideUp(userFieldToPostField);
    slideDown(userFieldToOption);
  }

  if (element.value === 'user field') {
    slideUp(userFieldToOption);
    slideUp(userFieldToPostField);
    slideDown(userFieldToUserField);
  }

  if (element.value === 'post field') {
    slideUp(userFieldToOption);
    slideUp(userFieldToUserField);
    slideDown(userFieldToPostField);
  }
};
/**
 * Select where to copy the post field
 * @param e Top element that got the click
 */


var copyPostFieldDestination = function copyPostFieldDestination(e) {
  var element = e.target;

  if (element.value === 'option') {
    slideUp(postFieldToUserField);
    slideUp(postFieldToPostField);
    slideDown(postFieldToOption);
  }

  if (element.value === 'user field') {
    slideUp(postFieldToOption);
    slideUp(postFieldToPostField);
    slideDown(postFieldToUserField);
  }

  if (element.value === 'post field') {
    slideUp(postFieldToOption);
    slideUp(postFieldToUserField);
    slideDown(postFieldToPostField);
  }
};

copyOptionSection.addEventListener('click', copyOptionDestinations, false);
copyUserMetaSection.addEventListener('click', copyUserFieldDestination, false);
copyPostMetaSection.addEventListener('click', copyPostFieldDestination, false);

/***/ }),

/***/ "./src/js/functions.js":
/*!*****************************!*\
  !*** ./src/js/functions.js ***!
  \*****************************/
/*! exports provided: isNumber, isNormalInteger, spinnerOn, spinnerOff */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return isNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNormalInteger", function() { return isNormalInteger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spinnerOn", function() { return spinnerOn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spinnerOff", function() { return spinnerOff; });
/* eslint-disable no-param-reassign */
var isNumber = function isNumber(o) {
  // eslint-disable-next-line no-restricted-globals
  return !isNaN(o - 0) && o !== null && o !== '' && o !== false;
};
/*
 * Checks if the content of a field is an integer >0
 * Useful to check if the content of an ID field is valid */
// eslint-disable-next-line no-unused-vars

var isNormalInteger = function isNormalInteger(str) {
  return /^([1-9]\d*)$/.test(str);
};
var spinnerOn = function spinnerOn() {
  var spinner = document.querySelector('.js-halfCircleSpinner');
  spinner.classList.remove('is-hidden');
};
var spinnerOff = function spinnerOff() {
  var spinner = document.querySelector('.js-halfCircleSpinner');
  spinner.classList.add('is-hidden');
};

/***/ }),

/***/ "./src/js/meta-box-ui.js":
/*!*******************************!*\
  !*** ./src/js/meta-box-ui.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions.js */ "./src/js/functions.js");
// eslint-disable-next-line import/extensions

var optionSection = document.querySelector('.js-optionsMetaSection');
var userMetaSection = document.querySelector('.js-userFieldsSection');
var postMetaSection = document.querySelector('.js-postFieldsSection'); // Change the color of the row field according to the option chosen

var changeFieldColor = function changeFieldColor(element) {
  var row = element.parentNode.parentNode.parentNode;
  var content = row.querySelector('.js-metaFieldInputValue');
  var toggleDateCheckbox = row.querySelector('.js-emptyArray');
  var arrayCheckbox = row.querySelector('.js-dateString');

  if (element.value === 'read') {
    row.classList.add('-color-white');
    row.classList.remove('-color-blue');
    row.classList.remove('-color-orange');
    content.disabled = true;
    toggleDateCheckbox.disabled = true;
    arrayCheckbox.disabled = true;
  }

  if (element.value === 'write') {
    row.classList.add('-color-blue');
    row.classList.remove('-color-white');
    row.classList.remove('-color-orange');
    content.disabled = false;
    toggleDateCheckbox.disabled = false;
    arrayCheckbox.disabled = false;
  }

  if (element.value === 'delete') {
    row.classList.add('-color-orange');
    row.classList.remove('-color-blue');
    row.classList.remove('-color-white');
    content.disabled = true;
    toggleDateCheckbox.disabled = true;
    arrayCheckbox.disabled = true;
  }
};

var newValueOptions = function newValueOptions(element) {
  var inputBox = element.parentNode.parentNode.parentNode;
  var toggleDateCheckbox = inputBox.querySelector('.js-dateString');
  var arrayCheckbox = inputBox.querySelector('.js-emptyArray');
  var content = inputBox.querySelector('.js-metaFieldInputValue');

  if (element.value === 'empty_array') {
    // if the user checked the empty array checkbox then disable the toggle date and return
    if (element.checked === true) {
      toggleDateCheckbox.checked = false;
      content.disabled = true;
    } else if (element.checked === false) {
      content.disabled = false;
    }
  }

  if (element.value === 'date_string') {
    content.disabled = false;
    arrayCheckbox.checked = false; // get the elements used to backup the values

    var dateTimestampBackup = document.querySelector('.js-metaFieldInputTimestampBackup');
    var dateStringBackup = document.querySelector('.js-metaFieldInputStringBackup'); // if it is a number interpret as a timestamp

    if (Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["isNumber"])(content.value)) {
      if (content.value === dateTimestampBackup.getAttribute('value')) {
        // if the value hasn't changed use the date string saved
        content.value = dateStringBackup.getAttribute('value');
      } else {
        // if the value has changed re-generate the date string
        var timestamp = content.value;
        dateTimestampBackup.setAttribute('value', timestamp);
        var dateInt = parseInt(timestamp, 10);
        var myDate = new Date(dateInt);
        content.value = myDate.toUTCString();
        dateStringBackup.setAttribute('value', content.value);
      }
    } else if (content.value !== null) {
      if (content.value === dateStringBackup.getAttribute('value')) {
        // if the date string hasn't changed use the timestamp saved
        content.value = dateTimestampBackup.getAttribute('value');
      } else {
        // if the date string has changed re-generate the timestamp
        var _myDate = new Date(content.value); // eslint-disable-next-line no-restricted-globals


        if (isNaN(_myDate.valueOf())) {
          alert('Please use a valid string date');
          toggleDateCheckbox.checked = false;
        } else {
          var dateString = content.value;
          dateStringBackup.setAttribute('value', dateString);
          content.value = _myDate.valueOf();
          dateTimestampBackup.setAttribute('value', content.value);
        }
      }
    }
  }
};
/* Toggle between date string and timestamp representation of the current field content */


var curValueDateString = function curValueDateString(element) {
  var row = element.parentNode.parentNode.parentNode;
  var fieldContent = row.querySelector('.js-fieldCurrentValue');
  var toggleDateCheckbox = row.querySelector('.js-fieldDateStringCurValue'); // get the elements used to backup the values

  var dateTimestampBackup = row.querySelector('.js-fieldValueTimestampBackup');
  var dateStringBackup = row.querySelector('.js-fieldValueStringBackup'); // if it is a number interpret as a timestamp

  if (Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["isNumber"])(fieldContent.innerText)) {
    if (dateStringBackup.getAttribute('value')) {
      // if there is a backup use it
      fieldContent.innerText = dateStringBackup.getAttribute('value');
    } else {
      var timestamp = fieldContent.innerText; // save the timestamp. Since the string is an approximation and loses the milliseconds
      // the backup guarantees that we get back the original timestamp

      dateTimestampBackup.setAttribute('value', timestamp);
      var dateInt = parseInt(fieldContent.innerText, 10);
      var myDate = new Date(dateInt);
      fieldContent.innerText = myDate.toUTCString();
      dateStringBackup.setAttribute('value', fieldContent.innerText);
    }
  } else if (dateTimestampBackup.getAttribute('value')) {
    fieldContent.innerText = dateTimestampBackup.getAttribute('value');
  } else {
    var _myDate2 = new Date(fieldContent.innerText); // eslint-disable-next-line no-restricted-globals


    if (isNaN(_myDate2.valueOf())) {
      alert('Please use a valid string date');
      toggleDateCheckbox.checked = false;
    } else {
      var dateString = content.innerText;
      dateStringBackup.setAttribute('value', dateString);
      fieldContent.innerText = _myDate2.valueOf();
      dateTimestampBackup.setAttribute('value', fieldContent.innerText);
    }
  }
};

var checkEvent = function checkEvent(e) {
  e.preventDefault();
  var element = e.target;
  /* Manage the action option */

  if (element.classList.contains('js-fieldAction')) {
    changeFieldColor(element);
  }
  /* Manage the checkboxes with the value options */


  if (element.classList.contains('js-fieldValueToAdd')) {
    newValueOptions(element);
  }
  /* Manage the current value checkbox */


  if (element.classList.contains('js-fieldDateStringCurValue')) {
    curValueDateString(element);
  }
};

optionSection.addEventListener('change', checkEvent, false);
userMetaSection.addEventListener('change', checkEvent, false);
postMetaSection.addEventListener('change', checkEvent, false);

/***/ }),

/***/ "./src/js/option-meta-actions.js":
/*!***************************************!*\
  !*** ./src/js/option-meta-actions.js ***!
  \***************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions.js */ "./src/js/functions.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-disable function-paren-newline */


var _wp = wp,
    apiFetch = _wp.apiFetch;
var submitOptions = document.querySelector('.js-submitOptions');
var read = {};
var write = {};
var del = {};
var finishedWrite = false;
var finishedRead = false;
var finishedDel = false;
var path = 'dapre-cft/v1/options';

function getWriteFields(row) {
  var index = row.dataset.index;
  var optionName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  var emptyArray = row.querySelector('.js-emptyArray').checked;
  var valueToWrite = row.querySelector('.js-metaFieldInputValue').value;
  write[index] = {
    optionName: optionName,
    emptyArray: emptyArray,
    valueToWrite: valueToWrite
  };
}

function getDeleteFields(row) {
  var index = row.dataset.index;
  var optionName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  del[index] = {
    optionName: optionName
  };
}

function readFields(row) {
  var index = row.dataset.index;
  var optionName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  read[index] = {
    optionName: optionName
  };
}

function refreshPage(fields) {
  // eslint-disable-next-line no-restricted-syntax
  for (var _i = 0, _Object$keys = Object.keys(fields); _i < _Object$keys.length; _i++) {
    var index = _Object$keys[_i];
    var field = fields[index];
    var row = document.querySelector(".js-optionFieldDataRow[data-index=\"".concat(index, "\"]"));

    if (field.error === '') {
      row.classList.remove('is-error');
    } else {
      row.classList.add('is-error');
    }

    row.querySelector('.js-fieldAction[value="read"]').click();
    var fieldErrorMessage = row.querySelector('.js-fieldErrorMessage');

    if (field.fieldErrorClass === '') {
      fieldErrorMessage.classList.add('is-hidden');
    } else {
      fieldErrorMessage.classList.remove('is-hidden');
    }

    var emptyArrayCheckbox = row.querySelector('.js-emptyArray');
    emptyArrayCheckbox.checked = false;
    emptyArrayCheckbox.disabled = true;
    var dateStringCheckbox = row.querySelector('.js-dateString');
    dateStringCheckbox.checked = false;
    dateStringCheckbox.disabled = true;
    var metaFieldInputValue = row.querySelector('.js-metaFieldInputValue');
    metaFieldInputValue.value = '';
    metaFieldInputValue.disabled = true;
    var fieldCurrentValue = row.querySelector('.js-fieldCurrentValue');
    fieldCurrentValue.innerHTML = JSON.parse(field.currentValue);
    var currentValueDateToggle = row.querySelector('.js-curValueDateToggle');

    if (field.curValueDateToggle === 'is-visible') {
      currentValueDateToggle.classList.add('is-visible');
      currentValueDateToggle.classList.remove('is-hidden');
    } else {
      currentValueDateToggle.classList.remove('is-visible');
      currentValueDateToggle.classList.add('is-hidden');
    }

    var fieldPreviousValue = row.querySelector('.js-fieldPreviousValue');
    fieldPreviousValue.innerHTML = JSON.parse(field.previousValue);
  }

  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();
}

function readData() {
  var readJSON = JSON.stringify(read);
  apiFetch({
    path: "".concat(path, "?names=").concat(readJSON),
    method: 'GET',
    parse: false
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    refreshPage(fields);
  });
}

function writeData() {
  var writeJSON = JSON.stringify(write);
  apiFetch({
    path: 'dapre-cft/v1/options',
    method: 'POST',
    body: writeJSON,
    parse: false
  }).then(function (response) {
    return (// console.log(response);
      response
    );
  });
}

function deleteData() {
  var delJSON = JSON.stringify(del);
  apiFetch({
    path: 'dapre-cft/v1/options',
    method: 'DELETE',
    body: delJSON,
    parse: false
  }).then(function (response) {
    return (// console.log(response);
      response
    );
  });
}

function getForm(e) {
  e.preventDefault();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  var rows = document.querySelectorAll('.js-optionFieldDataRow'); // eslint-disable-next-line no-restricted-syntax

  var _iterator = _createForOfIteratorHelper(rows),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var row = _step.value;
      var fieldAction = row.querySelector('.js-fieldAction:checked').value;

      if (fieldAction === 'write') {
        getWriteFields(row);
      }

      if (fieldAction === 'delete') {
        getDeleteFields(row);
      }

      if (fieldAction === 'read') {
        readFields(row);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  readData();
}

submitOptions.addEventListener('click', getForm, false);

/***/ }),

/***/ "./src/js/tab-navigation.js":
/*!**********************************!*\
  !*** ./src/js/tab-navigation.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var tab1 = document.querySelector('.js-tab_1');
var tab2 = document.querySelector('.js-tab_2');
var tab3 = document.querySelector('.js-tab_3');
var optionsForm = document.querySelector('.js-optionsForm');
var userFieldsForm = document.querySelector('.js-userFieldsForm');
var postFieldsForm = document.querySelector('.js-postFieldsForm');

var hideTab1 = function hideTab1() {
  tab1.classList.remove('nav-tab-active');
  optionsForm.classList.add('is-hidden');
};

var hideTab2 = function hideTab2() {
  tab2.classList.remove('nav-tab-active');
  userFieldsForm.classList.add('is-hidden');
};

var hideTab3 = function hideTab3() {
  tab3.classList.remove('nav-tab-active');
  postFieldsForm.classList.add('is-hidden');
};

var switchToTab1 = function switchToTab1(e) {
  e.preventDefault();
  /* activate clicked tab and make section visible */

  tab1.classList.add('nav-tab-active');
  optionsForm.classList.remove('is-hidden');
  tab1.blur();
  /* deactivate other tabs and hides sections */

  hideTab2();
  hideTab3();
};

var switchToTab2 = function switchToTab2(e) {
  e.preventDefault();
  /* activate clicked tab and make section visible */

  tab2.classList.add('nav-tab-active');
  userFieldsForm.classList.remove('is-hidden');
  tab2.blur();
  /* deactivate other tabs and hides sections */

  hideTab1();
  hideTab3();
};

var switchToTab3 = function switchToTab3(e) {
  e.preventDefault();
  /* activate clicked tab and make section visible */

  tab3.classList.add('nav-tab-active');
  postFieldsForm.classList.remove('is-hidden');
  tab3.blur();
  /* deactivate other tabs and hides sections */

  hideTab1();
  hideTab2();
};

tab1.addEventListener('click', switchToTab1, false);
tab2.addEventListener('click', switchToTab2, false);
tab3.addEventListener('click', switchToTab3, false);

/***/ })

/******/ });
//# sourceMappingURL=controller.min.js.map