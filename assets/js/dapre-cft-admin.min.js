/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/dapre-cft-admin.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/dapre-cft-admin.js":
/*!***********************************!*\
  !*** ./src/js/dapre-cft-admin.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function ($) {
  $(function () {
    $(document).ready(function () {
      /* $('.half-circle-spinner').hide(); */
    });
    /* **************************************************************************** */

    /* AJAX functionality for options fields section */

    $('.js-submitOptions').on('click', function (e) {
      /* Disable the button and show the spinner */
      $('.js-submitOptions').attr('disabled', 'disabled');
      $('.half-circle-spinner').show();
      e.preventDefault();
      /* Data to send back to the page */

      var data = {
        action: 'dapre_submit_options_fields',
        // eslint-disable-next-line no-undef
        dapre_cft_nonce: DapreCftAjax.nonce,
        data: $('.js-optionsForm').serialize()
      };
      /* Send data to the server, get the response and change the HTML */
      // eslint-disable-next-line no-undef

      $.post(DapreCftAjax.ajax_url, data, function (response) {
        if (response.success) {
          $('.js-optionsMetaSection').empty();
          $('.js-optionsMetaSection').append(response.data.html);
        }
        /* Re-enable the button and hide the spinner */


        $('.js-submitOptions').attr('disabled', false);
        $('.half-circle-spinner').hide();
      });
    });
    $('.js-submitRenameOption').on('click', function (e) {
      /* Disable the button and show the spinner */
      $('.js-submitRenameOption').attr('disabled', 'disabled');
      $('.half-circle-spinner').show();
      e.preventDefault();
      /* Data to send back to the page */

      var data = {
        action: 'dapre_rename_option',
        // eslint-disable-next-line no-undef
        dapre_cft_nonce: DapreCftAjax.nonce,
        data: $('.js-optionsForm').serialize()
      };
      /* Send data to the server, get the response and change the HTML */
      // eslint-disable-next-line no-undef

      $.post(DapreCftAjax.ajax_url, data, function (response) {
        if (response.success) {
          if (response.data.renamed) {
            $('.js-optionRenameOK').show();
            $('.js-optionRenameOK').fadeOut(2000);
            var oldOpt = document.querySelector('.js-oldOptionName');
            oldOpt.value = '';
            var newOpt = document.querySelector('.js-newOptionName');
            newOpt.value = '';
          } else {
            $.colorbox({
              html: "<h4>".concat(response.data.error, "</h4>"),
              width: '300px'
            });
          }
        }
        /* Re-enable the button and hide the spinner */


        $('.js-submitRenameOption').attr('disabled', false);
        $('.half-circle-spinner').hide();
      });
    });
    /* Copy option section */

    $('.js-copyOptionTo').on('click', function () {
      if ($('input[type=radio][name=copy_option_to]:checked').val() === 'option to option') {
        $('.js-copyOptionToUserField').slideUp('slow');
        $('.js-copyOptionToPostField').slideUp('slow');
        $('.js-copyOptionToOption').slideDown('slow');
      }

      if ($('input[type=radio][name=copy_option_to]:checked').val() === 'option to user field') {
        console.log('option to user field');
        $('.js-copyOptionToPostField').slideUp('slow');
        $('.js-copyOptionToOption').slideUp('slow');
        $('.js-copyOptionToUserField').slideDown('slow');
      }

      if ($('input[type=radio][name=copy_option_to]:checked').val() === 'option to post field') {
        $('.js-copyOptionToUserField').slideUp('slow');
        $('.js-copyOptionToOption').slideUp('slow');
        $('.js-copyOptionToPostField').slideDown('slow');
      }
    });
    $('.js-submitCopyOption').on('click', function (e) {
      /* Disable the button and show the spinner */
      $('.js-submitCopyOption').attr('disabled', 'disabled');
      $('.half-circle-spinner').show();
      e.preventDefault();
      /* Data to send back to the page */

      var data = {
        action: 'dapre_copy_option',
        // eslint-disable-next-line no-undef
        dapre_cft_nonce: DapreCftAjax.nonce,
        data: $('.js-optionsForm').serialize()
      };
      /* Send data to the server, get the response and change the HTML */
      // eslint-disable-next-line no-undef

      $.post(DapreCftAjax.ajax_url, data, function (response) {
        if (response.success) {
          if (response.data.copied) {
            $('.js-optionCopyOK').show();
            $('.js-optionCopyOK').fadeOut(2000);
            var oldOpt = document.querySelector('.js-currentOptionName');
            oldOpt.value = '';
            /* Block copy option to option */

            var newOpt = document.querySelector('.js-copyOptionToOptionName');
            newOpt.value = '';
            var createOption = document.querySelector('.js-copyOptionToOptionCreate');
            createOption.checked = false;
            /* Block copy option to user field */

            var optToUserFieldID = document.querySelector('.js-optToUserFieldID');
            optToUserFieldID.value = '';
            var optToUserFieldName = document.querySelector('.js-optToUserFieldName');
            optToUserFieldName.value = '';
            var optToUserFieldCreate = document.querySelector('.js-optToUserFieldCreate');
            optToUserFieldCreate.checked = false;
            /* Block copy option to post field */

            var optToPostFieldID = document.querySelector('.js-optToPostFieldID');
            optToPostFieldID.value = '';
            var optToPostFieldName = document.querySelector('.js-optToPostFieldName');
            optToPostFieldName.value = '';
            var optToPostFieldCreate = document.querySelector('.js-optToPostFieldCreate');
            optToPostFieldCreate.checked = false;
          } else {
            $.colorbox({
              html: "<h4>".concat(response.data.error, "</h4>"),
              width: '300px'
            });
          }
        }
        /* Re-enable the button and hide the spinner */


        $('.js-submitCopyOption').attr('disabled', false);
        $('.half-circle-spinner').hide();
      });
    });
    /** *************************************************************************** */

    /* AJAX functionality for user fields section */

    $('.js-submitUserFields').on('click', function (e) {
      $('.js-submitUserFields').attr('disabled', 'disabled');
      $('.half-circle-spinner').show();
      e.preventDefault();
      var data = {
        action: 'dapre_submit_user_fields',
        // eslint-disable-next-line no-undef
        dapre_cft_nonce: DapreCftAjax.nonce,
        data: $('.js-userFieldsForm').serialize()
      }; // eslint-disable-next-line no-undef

      $.post(DapreCftAjax.ajax_url, data, function (response) {
        console.log(response);

        if (response.success) {
          $('.js-userFieldsSection').empty();
          $('.js-userFieldsSection').append(response.data.html);
        }

        $('.js-submitUserFields').attr('disabled', false);
        $('.half-circle-spinner').hide();
      });
    });
    $('.js-submitRenameUserField').on('click', function (e) {
      /* Disable the button and show the spinner */
      $('.js-submitRenameUserField').attr('disabled', 'disabled');
      $('.half-circle-spinner').show();
      e.preventDefault();
      /* Data to send back to the page */

      var data = {
        action: 'dapre_rename_user_field',
        // eslint-disable-next-line no-undef
        dapre_cft_nonce: DapreCftAjax.nonce,
        data: $('.js-userFieldsForm').serialize()
      };
      /* Send data to the server, get the response and change the HTML */
      // eslint-disable-next-line no-undef

      $.post(DapreCftAjax.ajax_url, data, function (response) {
        if (response.success) {
          if (response.data.renamed) {
            $('.user-fields-message-ok').show();
            $('.user-fields-message-ok').fadeOut(2000);
            var oldOpt = document.querySelector('.js-userFieldRenameFieldName');
            oldOpt.value = '';
            var oldID = document.querySelector('.js-userFieldRenameUserID');
            oldID.value = 0;
            var newOpt = document.querySelector('.js-newUserFieldName');
            newOpt.value = '';
          } else {
            $.colorbox({
              html: "<h4>".concat(response.data.error, "</h4>"),
              width: '300px'
            });
          }
        }
        /* Re-enable the button and hide the spinner */


        $('.js-submitRenameUserField').attr('disabled', false);
        $('.half-circle-spinner').hide();
      });
    });
    /* Copy user field section */

    $('.js-copyUserFieldTo').on('click', function () {
      if ($('input[type=radio][name=copy_user_field_to]:checked').val() === 'user field to option') {
        $('.js-copyUserFieldToUserField').slideUp('slow');
        $('.js-copyOptionToPostField').slideUp('slow');
        $('.js-copyUserFieldToOption').slideDown('slow');
      }

      if ($('input[type=radio][name=copy_user_field_to]:checked').val() === 'user field to user field') {
        $('.js-copyUserFieldToOption').slideUp('slow');
        $('.js-copyOptionToPostField').slideUp('slow');
        $('.js-copyUserFieldToUserField').slideDown('slow');
      }

      if ($('input[type=radio][name=copy_user_field_to]:checked').val() === 'user field to post field') {
        $('.js-copyUserFieldToUserField').slideUp('slow');
        $('.js-copyUserFieldToOption').slideUp('slow');
        $('.js-copyOptionToPostField').slideDown('slow');
      }
    });
    $('.js-submitCopyUserField').on('click', function (e) {
      /* Disable the button and show the spinner */
      $('.js-submitCopyUserField').attr('disabled', 'disabled');
      $('.half-circle-spinner').show();
      e.preventDefault();
      /* Data to send back to the page */

      var data = {
        action: 'dapre_copy_user_field',
        // eslint-disable-next-line no-undef
        dapre_cft_nonce: DapreCftAjax.nonce,
        data: $('.js-userFieldsForm').serialize()
      };
      /* Send data to the server, get the response and change the HTML */
      // eslint-disable-next-line no-undef

      $.post(DapreCftAjax.ajax_url, data, function (response) {
        if (response.success) {
          if (response.data.copied) {
            $('.user-field-copy-ok').show();
            $('.user-field-copy-ok').fadeOut(2000);
            var oldUserFieldID = document.querySelector('.js-userFieldCopyUserID');
            oldUserFieldID.value = '';
            var oldUserFieldName = document.querySelector('.js-userFieldCopyFieldName');
            oldUserFieldName.value = '';
            /* Block copy user field to option */

            var newOpt = document.querySelector('.js-userFieldToOptionName');
            newOpt.value = '';
            var createOption = document.querySelector('.js-userFieldToOptionCreate');
            createOption.checked = false;
            /* Block copy user field to user field */

            var userFieldToUserFieldID = document.querySelector('.js-userFieldToUserFieldID');
            userFieldToUserFieldID.value = '';
            var userFieldToUserFieldName = document.querySelector('.js-userFieldToUserFieldName');
            userFieldToUserFieldName.value = '';
            var userFieldToUserFieldCreate = document.querySelector('.js-userFieldToUserFieldCreate');
            userFieldToUserFieldCreate.checked = false;
            /* Block copy user field to post field */

            var userFieldToPostFieldID = document.querySelector('.js-userFieldToPostFieldID');
            userFieldToPostFieldID.value = '';
            var userFieldToPostFieldName = document.querySelector('.js-userFieldToPostFieldName');
            userFieldToPostFieldName.value = '';
            var userFieldToPostFieldCreate = document.querySelector('.js-userFieldToPostFieldCreate');
            userFieldToPostFieldCreate.checked = false;
          } else {
            $.colorbox({
              html: "<h4>".concat(response.data.error, "</h4>"),
              width: '300px'
            });
          }
        }
        /* Re-enable the button and hide the spinner */


        $('.js-submitCopyUserField').attr('disabled', false);
        $('.half-circle-spinner').hide();
      });
    });
    /* End of AJAX for user field section */

    /** *************************************************************************** */

    /* AJAX functionality for post fields section */

    $('.js-submitPostFields').on('click', function (e) {
      $('.js-submitPostFields').attr('disabled', 'disabled');
      $('.half-circle-spinner').show();
      e.preventDefault();
      var data = {
        action: 'dapre_submit_post_fields',
        // eslint-disable-next-line no-undef
        dapre_cft_nonce: DapreCftAjax.nonce,
        data: $('.js-postFieldsForm').serialize()
      }; // eslint-disable-next-line no-undef

      $.post(DapreCftAjax.ajax_url, data, function (response) {
        if (response.success) {
          $('.js-postFieldsSection').empty();
          $('.js-postFieldsSection').append(response.data.html);
        }

        $('.js-submitPostFields').attr('disabled', false);
        $('.half-circle-spinner').hide();
      });
    });
    $('.js-submitRenamePostField').on('click', function (e) {
      /* Disable the button and show the spinner */
      $('.js-submitRenamePostField').attr('disabled', 'disabled');
      $('.half-circle-spinner').show();
      e.preventDefault();
      /* Data to send back to the page */

      var data = {
        action: 'dapre_rename_post_field',
        // eslint-disable-next-line no-undef
        dapre_cft_nonce: DapreCftAjax.nonce,
        data: $('.js-postFieldsForm').serialize()
      };
      /* Send data to the server, get the response and change the HTML */
      // eslint-disable-next-line no-undef

      $.post(DapreCftAjax.ajax_url, data, function (response) {
        if (response.success) {
          if (response.data.renamed) {
            $('.post-fields-message-ok').show();
            $('.post-fields-message-ok').fadeOut(2000);
            var oldOpt = document.querySelector('.js-postFieldRenameFieldName');
            oldOpt.value = '';
            var oldID = document.querySelector('.js-postFieldRenamePostID');
            oldID.value = 0;
            var newOpt = document.querySelector('.js-newPostFieldName');
            newOpt.value = '';
          } else {
            $.colorbox({
              html: "<h4>".concat(response.data.error, "</h4>"),
              width: '300px'
            });
          }
        }
        /* Re-enable the button and hide the spinner */


        $('.js-submitRenamePostField').attr('disabled', false);
        $('.half-circle-spinner').hide();
      });
    });
    /* Copy post field section */

    $('.js-copyPostFieldTo').on('click', function () {
      if ($('input[type=radio][name=copy_post_field_to]:checked').val() === 'post field to user field') {
        $('.js-copyPostFieldToOption').slideUp('slow');
        $('.js-copyOptionToPostField').slideUp('slow');
        $('.js-copyPostFieldToUserField').slideDown('slow');
      }

      if ($('input[type=radio][name=copy_post_field_to]:checked').val() === 'post field to option') {
        $('.js-copyOptionToPostField').slideUp('slow');
        $('.js-copyPostFieldToUserField').slideUp('slow');
        $('.js-copyPostFieldToOption').slideDown('slow');
      }

      if ($('input[type=radio][name=copy_post_field_to]:checked').val() === 'post field to post field') {
        $('.js-copyPostFieldToUserField').slideUp('slow');
        $('.js-copyPostFieldToOption').slideUp('slow');
        $('.js-copyOptionToPostField').slideDown('slow');
      }
    });
    $('.js-submitCopyPostField').on('click', function (e) {
      /* Disable the button and show the spinner */
      $('.js-submitCopyPostField').attr('disabled', 'disabled');
      $('.half-circle-spinner').show();
      e.preventDefault();
      /* Data to send back to the page */

      var data = {
        action: 'dapre_copy_post_field',
        // eslint-disable-next-line no-undef
        dapre_cft_nonce: DapreCftAjax.nonce,
        data: $('.js-postFieldsForm').serialize()
      };
      /* Send data to the server, get the response and change the HTML */
      // eslint-disable-next-line no-undef

      $.post(DapreCftAjax.ajax_url, data, function (response) {
        if (response.success) {
          if (response.data.copied) {
            $('.post-field-copy-ok').show();
            $('.post-field-copy-ok').fadeOut(2000);
            var oldPostFieldID = document.querySelector('.js-postFieldCopyPostID');
            oldPostFieldID.value = '';
            var oldPostFieldName = document.querySelector('.js-postFieldCopyFieldName');
            oldPostFieldName.value = '';
            /* Block copy post field to option */

            var newOpt = document.querySelector('.js-postFieldToOptionName');
            newOpt.value = '';
            var createOption = document.querySelector('.js-postFieldToOptionCreate');
            createOption.checked = false;
            /* Block copy post field to user field */

            var postFieldToUserFieldID = document.querySelector('.js-postFieldToUserFieldID');
            postFieldToUserFieldID.value = '';
            var postFieldToUserFieldName = document.querySelector('.js-postFieldToUserFieldName');
            postFieldToUserFieldName.value = '';
            var postFieldToUserFieldCreate = document.querySelector('.js-postFieldToUserFieldCreate');
            postFieldToUserFieldCreate.checked = false;
            /* Block copy post field to post field */

            var postFieldToPostFieldID = document.querySelector('.js-postFieldToPostFieldID');
            postFieldToPostFieldID.value = '';
            var postFieldToPostFieldName = document.querySelector('.js-postFieldToPostFieldName');
            postFieldToPostFieldName.value = '';
            var postFieldToPostFieldCreate = document.querySelector('.js-postFieldToPostFieldCreate');
            postFieldToPostFieldCreate.checked = false;
          } else {
            $.colorbox({
              html: "<h4>".concat(response.data.error, "</h4>"),
              width: '300px'
            });
          }
        }
        /* Re-enable the button and hide the spinner */


        $('.js-submitCopyPostField').attr('disabled', false);
        $('.half-circle-spinner').hide();
      });
    });
    /* End of AJAX for post field section */

    /* **************************************************************************** */

    /* switch to tab 1 when clicked */

    $('.js-tab_1').on('click', function (e) {
      e.preventDefault();
      $('.js-tab_1').blur();
      /* activate clicked tab and make section visible */

      $('.js-tab_1').addClass('nav-tab-active');
      $('.js-optionsForm').removeClass('is-hidden');
      /* deactivate other tabs and hides sections */

      $('.js-tab_2').removeClass('nav-tab-active');
      $('.js-userFieldsForm').addClass('is-hidden');
      $('.js-tab_3').removeClass('nav-tab-active');
      $('.js-postFieldsForm').addClass('is-hidden');
    });
    /* switch to tab 2 when clicked */

    $('.js-tab_2').on('click', function (e) {
      e.preventDefault();
      $('.js-tab_2').blur();
      /* activate clicked tab and make section visible */

      $('.js-tab_2').addClass('nav-tab-active');
      $('.js-userFieldsForm').removeClass('is-hidden');
      /* deactivate other tabs and hides sections */

      $('.js-tab_1').removeClass('nav-tab-active');
      $('.js-optionsForm').addClass('is-hidden');
      $('.js-tab_3').removeClass('nav-tab-active');
      $('.js-postFieldsForm').addClass('is-hidden');
    });
    /* switch to tab 3 when clicked */

    $('.js-tab_3').on('click', function (e) {
      e.preventDefault();
      $('.js-tab_3').blur();
      /* activate clicked tab and make section visible */

      $('.js-tab_3').addClass('nav-tab-active');
      $('.js-postFieldsForm').removeClass('is-hidden');
      /* deactivate other tabs and hides sections */

      $('.js-tab_1').removeClass('nav-tab-active');
      $('.js-optionsForm').addClass('is-hidden');
      $('.js-tab_2').removeClass('nav-tab-active');
      $('.js-userFieldsForm').addClass('is-hidden');
    });
  });
  $('.js-inputCopyOptionToOption').change(function () {
    $('.js-copyOptionToOption').slideDown();
    $('.js-copyOptionToUserField').slideUp();
    $('.js-copyOptionToPostField').slideUp();
  });
})(jQuery);

function isNumber(o) {
  // eslint-disable-next-line no-restricted-globals
  return !isNaN(o - 0) && o !== null && o !== '' && o !== false;
}
/*
 * Checks if the content of a field is an integer >0
 * Useful to check if the content of an ID field is valid */
// eslint-disable-next-line no-unused-vars


function isNormalInteger(str) {
  return /^([1-9]\d*)$/.test(str);
} // manage the toggle action radio buttons and option checkboxes


function toggleOptionAction(element) {
  var index = element.dataset.index;
  var row = document.querySelector(".js-optionFieldDataRow_".concat(index));
  var content = document.querySelector(".js-optionFieldInputValue_".concat(index));
  var toggleDateCheckbox = document.querySelector(".js-optionDateString_".concat(index));
  var arrayCheckbox = document.querySelector(".js-optionEmptyArray_".concat(index));

  if (element.type === 'checkbox') {
    if (element.classList.contains("js-optionEmptyArray_".concat(index))) {
      // if the user checked the empty array checkbox then disable the toggle date and return
      if (element.checked === true) {
        toggleDateCheckbox.checked = false;
        content.disabled = true;
      } else if (element.checked === false) {
        content.disabled = false;
      }
    }
    /* toggle between date string and timestamp representation of the input field content */


    if (element.classList.contains("js-optionDateString_".concat(index))) {
      content.disabled = false;
      arrayCheckbox.checked = false; // get the elements used to backup the values

      var dateTimestampBackup = document.querySelector(".js-optionFieldInputTimestampBackup_".concat(index));
      var dateStringBackup = document.querySelector(".js-optionFieldInputStringBackup_".concat(index)); // if it is a number interpret as a timestamp

      if (isNumber(content.value)) {
        if (content.value === dateTimestampBackup.getAttribute('value')) {
          // if the value hasn't changed use the date string saved
          content.value = dateStringBackup.getAttribute('value');
        } else {
          // if the value has changed re-generate the date string
          var timestamp = content.value;
          dateTimestampBackup.setAttribute('value', timestamp);
          var dateInt = parseInt(timestamp, 10);
          var myDate = new Date(dateInt);
          content.value = myDate.toUTCString();
          dateStringBackup.setAttribute('value', content.value);
        }
      } else if (content.value !== null) {
        if (content.value === dateStringBackup.getAttribute('value')) {
          // if the date string hasn't changed use the timestamp saved
          content.value = dateTimestampBackup.getAttribute('value');
        } else {
          // if the date string has changed re-generate the timestamp
          var _myDate = new Date(content.value); // eslint-disable-next-line no-restricted-globals


          if (isNaN(_myDate.valueOf())) {
            alert('Please use a valid string date');
            toggleDateCheckbox.checked = false;
          } else {
            var dateString = content.value;
            dateStringBackup.setAttribute('value', dateString);
            content.value = _myDate.valueOf();
            dateTimestampBackup.setAttribute('value', content.value);
          }
        }
      }
    }
    /* toggle between date string and timestamp representation of the field content */


    if (element.classList.contains("js-optionDateStringCurValue_".concat(index))) {
      var fieldContent = document.querySelector(".js-optionFieldValue_".concat(index)); // get the elements used to backup the values

      var _dateTimestampBackup = document.querySelector(".js-optionFieldValueTimestampBackup_".concat(index));

      var _dateStringBackup = document.querySelector(".js-optionFieldValueStringBackup_".concat(index)); // if it is a number interpret as a timestamp


      if (isNumber(fieldContent.innerText)) {
        if (_dateStringBackup.getAttribute('value')) {
          // if there is a backup use it
          fieldContent.innerText = _dateStringBackup.getAttribute('value');
        } else {
          var _timestamp = fieldContent.innerText; // save the timestamp. Since the string is an approximation and loses the milliseconds
          // the backup guarantees that we get back the original timestamp

          _dateTimestampBackup.setAttribute('value', _timestamp);

          var _dateInt = parseInt(fieldContent.innerText, 10);

          var _myDate2 = new Date(_dateInt);

          fieldContent.innerText = _myDate2.toUTCString();

          _dateStringBackup.setAttribute('value', fieldContent.innerText);
        }
      } else if (_dateTimestampBackup.getAttribute('value')) {
        fieldContent.innerText = _dateTimestampBackup.getAttribute('value');
      } else {
        var _myDate3 = new Date(fieldContent.innerText); // eslint-disable-next-line no-restricted-globals


        if (isNaN(_myDate3.valueOf())) {
          alert('Please use a valid string date');
          toggleDateCheckbox.checked = false;
        } else {
          var _dateString = content.innerText;

          _dateStringBackup.setAttribute('value', _dateString);

          fieldContent.innerText = _myDate3.valueOf();

          _dateTimestampBackup.setAttribute('value', fieldContent.innerText);
        }
      }
    }
  }

  if (element.type === 'radio') {
    if (element.value === 'read') {
      row.classList.add('-color-white');
      row.classList.remove('-color-blue');
      row.classList.remove('-color-orange');
      content.disabled = true;
      toggleDateCheckbox.disabled = true;
      arrayCheckbox.disabled = true;
    }

    if (element.value === 'write') {
      row.classList.add('-color-blue');
      row.classList.remove('-color-white');
      row.classList.remove('-color-orange');
      content.disabled = false;
      toggleDateCheckbox.disabled = false;
      arrayCheckbox.disabled = false;
    }

    if (element.value === 'delete') {
      row.classList.add('-color-orange');
      row.classList.remove('-color-blue');
      row.classList.remove('-color-white');
      content.disabled = true;
      toggleDateCheckbox.disabled = true;
      arrayCheckbox.disabled = true;
    }
  }
} // manage the toggle action radio buttons


function toggleUserAction(element) {
  var index = element.dataset.index;
  var row = document.querySelector(".js-userFieldsFieldDataRow_".concat(index));
  var content = document.querySelector(".js-userFieldInputValue_".concat(index));
  var toggleDateCheckbox = document.querySelector(".js-userDateString_".concat(index));
  var arrayCheckbox = document.querySelector(".js-userEmptyArray_".concat(index));

  if (element.type === 'checkbox') {
    if (element.classList.contains("js-userEmptyArray_".concat(index))) {
      // if the user checked the empty array checkbox then disable the toggle date and return
      if (element.checked === true) {
        toggleDateCheckbox.checked = false;
        content.disabled = true;
      } else if (element.checked === false) {
        content.disabled = false;
      }
    }
    /* toggle between date string and timestamp representation of the input field content */


    if (element.classList.contains("js-userDateString_".concat(index))) {
      content.disabled = false;
      arrayCheckbox.checked = false; // get the elements used to backup the values

      var dateTimestampBackup = document.querySelector(".js-userFieldInputTimestampBackup_".concat(index));
      var dateStringBackup = document.querySelector(".js-userFieldInputStringBackup_".concat(index)); // if it is a number interpret as a timestamp

      if (isNumber(content.value)) {
        if (content.value === dateTimestampBackup.getAttribute('value')) {
          // if the value hasn't changed use the date string saved
          content.value = dateStringBackup.getAttribute('value');
        } else {
          // if the value has changed re-generate the date string
          var timestamp = content.value;
          dateTimestampBackup.setAttribute('value', timestamp);
          var dateInt = parseInt(timestamp, 10);
          var myDate = new Date(dateInt);
          content.value = myDate.toUTCString();
          dateStringBackup.setAttribute('value', content.value);
        }
      } else if (content.value !== null) {
        if (content.value === dateStringBackup.getAttribute('value')) {
          // if the date string hasn't changed use the timestamp saved
          content.value = dateTimestampBackup.getAttribute('value');
        } else {
          // if the date string has changed re-generate the timestamp
          var _myDate4 = new Date(content.value); // eslint-disable-next-line no-restricted-globals


          if (isNaN(_myDate4.valueOf())) {
            alert('Please use a valid string date');
            toggleDateCheckbox.checked = false;
          } else {
            var dateString = content.value;
            dateStringBackup.setAttribute('value', dateString);
            content.value = _myDate4.valueOf();
            dateTimestampBackup.setAttribute('value', content.value);
          }
        }
      }
    }
    /* toggle between date string and timestamp representation of the field content */


    if (element.classList.contains("js-userDateStringCurValue_".concat(index))) {
      var fieldContent = document.querySelector(".js-userFieldValue_".concat(index)); // get the elements used to backup the values

      var _dateTimestampBackup2 = document.querySelector(".js-userFieldValueTimestampBackup_".concat(index));

      var _dateStringBackup2 = document.querySelector(".js-userFieldValueStringBackup_".concat(index)); // if it is a number interpret as a timestamp


      if (isNumber(fieldContent.innerText)) {
        if (_dateStringBackup2.getAttribute('value')) {
          // if there is a backup use it
          fieldContent.innerText = _dateStringBackup2.getAttribute('value');
        } else {
          var _timestamp2 = fieldContent.innerText; // save the timestamp. Since the string is an approximation and loses the milliseconds
          // the backup guarantees that we get back the original timestamp

          _dateTimestampBackup2.setAttribute('value', _timestamp2);

          var _dateInt2 = parseInt(fieldContent.innerText, 10);

          var _myDate5 = new Date(_dateInt2);

          fieldContent.innerText = _myDate5.toUTCString();

          _dateStringBackup2.setAttribute('value', fieldContent.innerText);
        }
      } else if (_dateTimestampBackup2.getAttribute('value')) {
        fieldContent.innerText = _dateTimestampBackup2.getAttribute('value');
      } else {
        var _myDate6 = new Date(fieldContent.innerText); // eslint-disable-next-line no-restricted-globals


        if (isNaN(_myDate6.valueOf())) {
          alert('Please use a valid string date');
          toggleDateCheckbox.checked = false;
        } else {
          var _dateString2 = content.innerText;

          _dateStringBackup2.setAttribute('value', _dateString2);

          fieldContent.innerText = _myDate6.valueOf();

          _dateTimestampBackup2.setAttribute('value', fieldContent.innerText);
        }
      }
    }
  }

  if (element.type === 'radio') {
    if (element.value === 'read') {
      row.classList.add('-color-white');
      row.classList.remove('-color-blue');
      row.classList.remove('-color-orange');
      content.disabled = true;
      toggleDateCheckbox.disabled = true;
      arrayCheckbox.disabled = true;
    }

    if (element.value === 'write') {
      row.classList.add('-color-blue');
      row.classList.remove('-color-white');
      row.classList.remove('-color-orange');
      content.disabled = false;
      toggleDateCheckbox.disabled = false;
      arrayCheckbox.disabled = false;
    }

    if (element.value === 'delete') {
      row.classList.add('-color-orange');
      row.classList.remove('-color-blue');
      row.classList.remove('-color-white');
      content.disabled = true;
      toggleDateCheckbox.disabled = true;
      arrayCheckbox.disabled = true;
    }
  }
} // manage the toggle action radio buttons


function togglePostAction(element) {
  var index = element.dataset.index;
  var row = document.querySelector(".js-postFieldsFieldDataRow_".concat(index));
  var content = document.querySelector(".js-postFieldInputValue_".concat(index));
  var toggleDateCheckbox = document.querySelector(".js-postDateString_".concat(index));
  var arrayCheckbox = document.querySelector(".js-postEmptyArray_".concat(index));

  if (element.type === 'checkbox') {
    if (element.classList.contains("js-postEmptyArray_".concat(index))) {
      // if the user checked the empty array checkbox then disable the toggle date and return
      if (element.checked === true) {
        toggleDateCheckbox.checked = false;
        content.disabled = true;
      } else if (element.checked === false) {
        content.disabled = false;
      }
    }
    /* toggle between date string and timestamp representation of the input field content */


    if (element.classList.contains("js-postDateString_".concat(index))) {
      content.disabled = false;
      arrayCheckbox.checked = false; // get the elements used to backup the values

      var dateTimestampBackup = document.querySelector(".js-postFieldInputTimestampBackup_".concat(index));
      var dateStringBackup = document.querySelector(".js-postFieldInputStringBackup_".concat(index)); // if it is a number interpret as a timestamp

      if (isNumber(content.value)) {
        if (content.value === dateTimestampBackup.getAttribute('value')) {
          // if the value hasn't changed use the date string saved
          content.value = dateStringBackup.getAttribute('value');
        } else {
          // if the value has changed re-generate the date string
          var timestamp = content.value;
          dateTimestampBackup.setAttribute('value', timestamp);
          var dateInt = parseInt(timestamp, 10);
          var myDate = new Date(dateInt);
          content.value = myDate.toUTCString();
          dateStringBackup.setAttribute('value', content.value);
        }
      } else if (content.value !== null) {
        if (content.value === dateStringBackup.getAttribute('value')) {
          // if the date string hasn't changed use the timestamp saved
          content.value = dateTimestampBackup.getAttribute('value');
        } else {
          // if the date string has changed re-generate the timestamp
          var _myDate7 = new Date(content.value); // eslint-disable-next-line no-restricted-globals


          if (isNaN(_myDate7.valueOf())) {
            alert('Please use a valid string date');
            toggleDateCheckbox.checked = false;
          } else {
            var dateString = content.value;
            dateStringBackup.setAttribute('value', dateString);
            content.value = _myDate7.valueOf();
            dateTimestampBackup.setAttribute('value', content.value);
          }
        }
      }
    }
    /* toggle between date string and timestamp representation of the field content */


    if (element.classList.contains("js-postDateStringCurValue_".concat(index))) {
      var fieldContent = document.querySelector(".js-postFieldValue_".concat(index)); // get the elements used to backup the values

      var _dateTimestampBackup3 = document.querySelector(".js-postFieldValueTimestampBackup_".concat(index));

      var _dateStringBackup3 = document.querySelector(".js-postFieldValueStringBackup_".concat(index)); // if it is a number interpret as a timestamp


      if (isNumber(fieldContent.innerText)) {
        if (_dateStringBackup3.getAttribute('value')) {
          // if there is a backup use it
          fieldContent.innerText = _dateStringBackup3.getAttribute('value');
        } else {
          var _timestamp3 = fieldContent.innerText; // save the timestamp. Since the string is an approximation and loses the milliseconds
          // the backup guarantees that we get back the original timestamp

          _dateTimestampBackup3.setAttribute('value', _timestamp3);

          var _dateInt3 = parseInt(fieldContent.innerText, 10);

          var _myDate8 = new Date(_dateInt3);

          fieldContent.innerText = _myDate8.toUTCString();

          _dateStringBackup3.setAttribute('value', fieldContent.innerText);
        }
      } else if (_dateTimestampBackup3.getAttribute('value')) {
        fieldContent.innerText = _dateTimestampBackup3.getAttribute('value');
      } else {
        var _myDate9 = new Date(fieldContent.innerText); // eslint-disable-next-line no-restricted-globals


        if (isNaN(_myDate9.valueOf())) {
          alert('Please use a valid string date');
          toggleDateCheckbox.checked = false;
        } else {
          var _dateString3 = content.innerText;

          _dateStringBackup3.setAttribute('value', _dateString3);

          fieldContent.innerText = _myDate9.valueOf();

          _dateTimestampBackup3.setAttribute('value', fieldContent.innerText);
        }
      }
    }
  }

  if (element.type === 'radio') {
    if (element.value === 'read') {
      row.classList.add('-color-white');
      row.classList.remove('-color-blue');
      row.classList.remove('-color-orange');
      content.disabled = true;
      toggleDateCheckbox.disabled = true;
      arrayCheckbox.disabled = true;
    }

    if (element.value === 'write') {
      row.classList.add('-color-blue');
      row.classList.remove('-color-white');
      row.classList.remove('-color-orange');
      content.disabled = false;
      toggleDateCheckbox.disabled = false;
      arrayCheckbox.disabled = false;
    }

    if (element.value === 'delete') {
      row.classList.add('-color-orange');
      row.classList.remove('-color-blue');
      row.classList.remove('-color-white');
      content.disabled = true;
      toggleDateCheckbox.disabled = true;
      arrayCheckbox.disabled = true;
    }
  }
}
/*
 * Called when the action radio button in the options screen is clicked
 *
 * @param {object} e The event object
 * @returns {undefined}
 */


var checkOptionEvent = function checkOptionEvent(e) {
  toggleOptionAction(e.target);
};
/*
 * Called when the action radio button in the users screen is clicked
 *
 * @param {object} e The event object
 * @returns {undefined}
 */


var checkUserEvent = function checkUserEvent(e) {
  toggleUserAction(e.target);
};
/*
 * Called when the action radio button in the posts screen is clicked
 *
 * @param {object} e The event object
 * @returns {undefined}
 */


var checkPostEvent = function checkPostEvent(e) {
  togglePostAction(e.target);
};

var checkEvents = function checkEvents(e) {
  var optionSection = document.querySelector('.js-optionsMetaSection');
  optionSection.addEventListener('change', checkOptionEvent, false);
  var userSection = document.querySelector('.js-userFieldsSection');
  userSection.addEventListener('change', checkUserEvent, false);
  var postSection = document.querySelector('.js-postFieldsSection');
  postSection.addEventListener('change', checkPostEvent, false);
  var dateToggle = document.querySelector('.js-optionsMetaSection');
  dateToggle.addEventListener('change', checkOptionEvent, false);
};

window.addEventListener('load', checkEvents, false);

/***/ })

/******/ });
//# sourceMappingURL=dapre-cft-admin.min.js.map