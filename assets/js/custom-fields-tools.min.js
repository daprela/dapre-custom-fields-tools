/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/controller.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

module.exports = _iterableToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles */ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js");

var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit */ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");

var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");

var nonIterableRest = __webpack_require__(/*! ./nonIterableRest */ "./node_modules/@babel/runtime/helpers/nonIterableRest.js");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");

var iterableToArray = __webpack_require__(/*! ./iterableToArray */ "./node_modules/@babel/runtime/helpers/iterableToArray.js");

var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");

var nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;

/***/ }),

/***/ "./src/js/add-remove-meta-row.js":
/*!***************************************!*\
  !*** ./src/js/add-remove-meta-row.js ***!
  \***************************************/
/*! exports provided: refreshOptionArrows, refreshUserArrows, refreshPostArrows */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "refreshOptionArrows", function() { return refreshOptionArrows; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "refreshUserArrows", function() { return refreshUserArrows; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "refreshPostArrows", function() { return refreshPostArrows; });
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions.js */ "./src/js/functions.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-disable function-paren-newline */
// eslint-disable import/extensions
 // eslint-disable-next-line no-undef

var _wp = wp,
    apiFetch = _wp.apiFetch;
var optionSection = document.querySelector('.js-optionsMetaSection');
var userMetaSection = document.querySelector('.js-userFieldsSection');
var postMetaSection = document.querySelector('.js-postFieldsSection');
function refreshOptionArrows() {
  return;
  var optionRows = Array.from(document.querySelectorAll('.js-optionFieldDataRow'));

  function positionRow(optionRow, index) {
    var arrow = optionRow.querySelector('.js-addRemoveOptionRow');
    arrow.style.top = "".concat(optionRow.offsetTop + optionRow.offsetHeight - 10, "px");

    if (index < optionRows.length - 1) {
      arrow.innerHTML = '-';
      arrow.title = 'Remove the next row';
    } else {
      arrow.innerHTML = '+';
      arrow.title = 'Add another row';
    }
  }

  optionRows.forEach(positionRow);
}
function refreshUserArrows() {
  var userRows = Array.from(document.querySelectorAll('.js-userFieldsDataRow'));

  function positionRow(userRow, index) {
    var arrow = userRow.querySelector('.js-addRemoveUserRow');
    arrow.style.top = "".concat(userRow.offsetTop + userRow.offsetHeight - 10, "px");

    if (index < userRows.length - 1) {
      arrow.innerHTML = '-';
      arrow.title = 'Remove the next row';
    } else {
      arrow.innerHTML = '+';
      arrow.title = 'Add another row';
    }
  }

  userRows.forEach(positionRow);
}
function refreshPostArrows() {
  var postRows = Array.from(document.querySelectorAll('.js-postFieldsDataRow'));

  function positionRow(postRow, index) {
    var arrow = postRow.querySelector('.js-addRemovePostRow');
    arrow.style.top = "".concat(postRow.offsetTop + postRow.offsetHeight - 10, "px");

    if (index < postRows.length - 1) {
      arrow.innerHTML = '-';
      arrow.title = 'Remove the next row';
    } else {
      arrow.innerHTML = '+';
      arrow.title = 'Add another row';
    }
  }

  postRows.forEach(positionRow);
}

function addArrows() {
  refreshOptionArrows();
  refreshUserArrows();
  refreshPostArrows();
}

function removeOptionRow(elementRow, path) {
  var submitOptionsButton = document.querySelector('.js-submitOptions');
  var elementToRemove = elementRow.nextElementSibling;
  elementToRemove.remove();
  refreshOptionArrows();
  var rows = document.querySelectorAll('.js-optionFieldDataRow');
  var options = []; // eslint-disable-next-line no-restricted-syntax

  var _iterator = _createForOfIteratorHelper(rows),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var row = _step.value;
      var index = row.dataset.index;
      options.push(index);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var removeJSON = JSON.stringify(options);
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  submitOptionsButton.disabled = true;
  /* Launches the Rest request to write fields */

  apiFetch({
    path: path,
    method: 'DELETE',
    body: removeJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    submitOptionsButton.disabled = false;
    submitOptionsButton.blur();
    Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();

    if (fields.error) {}
  });
}

function addOptionRow(elementRow, path) {
  var table = elementRow.parentElement;
  var oldRow = document.querySelector('.js-optionFieldDataRow[data-index="0"]');
  var newRow = oldRow.cloneNode(true);
  newRow.dataset.index = Number(elementRow.dataset.index) + 1;
  var optionName = newRow.querySelector('.js-optionFieldName');
  optionName.value = '';
  optionName.name = "field_name[".concat(newRow.dataset.index, "]"); // start removing the content of the previous row

  newRow.classList.remove('is-error');
  newRow.querySelector('.js-fieldAction[value="read"]').disabled = false;
  newRow.querySelector('.js-fieldAction[value="write"]').disabled = true;
  newRow.querySelector('.js-fieldAction[value="delete"]').disabled = true;
  newRow.querySelector('.js-fieldAction[value="read"]').name = "field_action[".concat(newRow.dataset.index, "]");
  newRow.querySelector('.js-fieldAction[value="write"]').name = "field_action[".concat(newRow.dataset.index, "]");
  newRow.querySelector('.js-fieldAction[value="delete"]').name = "field_action[".concat(newRow.dataset.index, "]"); // manages the error message

  var fieldErrorMessage = newRow.querySelector('.js-fieldErrorMessage');
  fieldErrorMessage.innerHTML = '';
  fieldErrorMessage.classList.add('is-hidden'); // manages the empty array checkbox

  var emptyArrayCheckbox = newRow.querySelector('.js-emptyArray');
  emptyArrayCheckbox.checked = false;
  emptyArrayCheckbox.disabled = true;
  emptyArrayCheckbox.name = "empty_array[".concat(newRow.dataset.index, "]"); // manages the date string checkbox

  var dateStringCheckbox = newRow.querySelector('.js-dateString');
  dateStringCheckbox.checked = false;
  dateStringCheckbox.disabled = true;
  dateStringCheckbox.name = "date_string[".concat(newRow.dataset.index, "]"); // input value box

  var metaFieldInputValue = newRow.querySelector('.js-metaFieldInputValue');
  metaFieldInputValue.value = '';
  metaFieldInputValue.disabled = true;
  metaFieldInputValue.name = "field_value[".concat(newRow.dataset.index, "]"); // Current value

  var fieldCurrentValue = newRow.querySelector('.js-fieldCurrentValue');
  fieldCurrentValue.innerHTML = ''; // Current value date-string option

  var currentValueDateToggle = newRow.querySelector('.js-curValueDateToggle');
  currentValueDateToggle.classList.remove('is-visible');
  currentValueDateToggle.classList.add('is-hidden');
  var currentValueDateToggleCheckbox = newRow.querySelector('.js-fieldDateStringCurValue');
  currentValueDateToggleCheckbox.name = "date_string_show[".concat(newRow.dataset.index, "]"); // Previous value

  var fieldPreviousValue = newRow.querySelector('.js-fieldPreviousValue');
  fieldPreviousValue.innerHTML = '';
  table.appendChild(newRow);
  refreshOptionArrows();
  var submitOptionsButton = document.querySelector('.js-submitOptions');
  var addJSON = JSON.stringify(newRow.dataset.index);
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  submitOptionsButton.disabled = true;
  /* Launches the Rest request to write fields */

  apiFetch({
    path: path,
    method: 'POST',
    body: addJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    submitOptionsButton.disabled = false;
    submitOptionsButton.blur();
    Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();

    if (fields.error) {}
  });
}

function removeUserRow(elementRow, path) {
  var submitUserButton = document.querySelector('.js-submitUserFields');
  var elementToRemove = elementRow.nextElementSibling;
  elementToRemove.remove();
  refreshUserArrows();
  var rows = document.querySelectorAll('.js-userFieldsDataRow');
  var metaFields = []; // eslint-disable-next-line no-restricted-syntax

  var _iterator2 = _createForOfIteratorHelper(rows),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var row = _step2.value;
      var index = row.dataset.index;
      metaFields.push(index);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var removeJSON = JSON.stringify(metaFields);
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  submitUserButton.disabled = true;
  /* Launches the Rest request to write fields */

  apiFetch({
    path: path,
    method: 'DELETE',
    body: removeJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    submitUserButton.disabled = false;
    submitUserButton.blur();
    Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();

    if (fields.error) {}
  });
}

function addUserRow(elementRow, path) {
  var table = elementRow.parentElement;
  var oldRow = document.querySelector('.js-userFieldsDataRow[data-index="0"]');
  var newRow = oldRow.cloneNode(true);
  newRow.dataset.index = Number(elementRow.dataset.index) + 1;
  var fieldID = newRow.querySelector('.js-userFieldID');
  fieldID.value = '';
  fieldID.name = "user_id[".concat(newRow.dataset.index, "]");
  var fieldName = newRow.querySelector('.js-userFieldName');
  fieldName.value = '';
  fieldName.name = "field_name[".concat(newRow.dataset.index, "]"); // start removing the content of the previous row

  newRow.classList.remove('is-error');
  newRow.querySelector('.js-fieldAction[value="read"]').disabled = false;
  newRow.querySelector('.js-fieldAction[value="write"]').disabled = true;
  newRow.querySelector('.js-fieldAction[value="delete"]').disabled = true;
  newRow.querySelector('.js-fieldAction[value="read"]').name = "field_action[".concat(newRow.dataset.index, "]");
  newRow.querySelector('.js-fieldAction[value="write"]').name = "field_action[".concat(newRow.dataset.index, "]");
  newRow.querySelector('.js-fieldAction[value="delete"]').name = "field_action[".concat(newRow.dataset.index, "]"); // manages the error message

  var fieldErrorMessage = newRow.querySelector('.js-fieldErrorMessage');
  fieldErrorMessage.innerHTML = '';
  fieldErrorMessage.classList.add('is-hidden'); // manages the empty array checkbox

  var emptyArrayCheckbox = newRow.querySelector('.js-emptyArray');
  emptyArrayCheckbox.checked = false;
  emptyArrayCheckbox.disabled = true;
  emptyArrayCheckbox.name = "empty_array[".concat(newRow.dataset.index, "]"); // manages the date string checkbox

  var dateStringCheckbox = newRow.querySelector('.js-dateString');
  dateStringCheckbox.checked = false;
  dateStringCheckbox.disabled = true;
  dateStringCheckbox.name = "date_string[".concat(newRow.dataset.index, "]"); // input value box

  var metaFieldInputValue = newRow.querySelector('.js-metaFieldInputValue');
  metaFieldInputValue.value = '';
  metaFieldInputValue.disabled = true;
  metaFieldInputValue.name = "field_value[".concat(newRow.dataset.index, "]"); // Current value

  var fieldCurrentValue = newRow.querySelector('.js-fieldCurrentValue');
  fieldCurrentValue.innerHTML = ''; // Current value date-string option

  var currentValueDateToggle = newRow.querySelector('.js-curValueDateToggle');
  currentValueDateToggle.classList.remove('is-visible');
  currentValueDateToggle.classList.add('is-hidden');
  var currentValueDateToggleCheckbox = newRow.querySelector('.js-fieldDateStringCurValue');
  currentValueDateToggleCheckbox.name = "date_string_show[".concat(newRow.dataset.index, "]"); // Previous value

  var fieldPreviousValue = newRow.querySelector('.js-fieldPreviousValue');
  fieldPreviousValue.innerHTML = '';
  table.appendChild(newRow);
  refreshUserArrows();
  var submitUserButton = document.querySelector('.js-submitUserFields');
  var addJSON = JSON.stringify(newRow.dataset.index);
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  submitUserButton.disabled = true;
  /* Launches the Rest request to write fields */

  apiFetch({
    path: path,
    method: 'POST',
    body: addJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    submitUserButton.disabled = false;
    submitUserButton.blur();
    Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();

    if (fields.error) {}
  });
}

function removePostRow(elementRow, path) {
  var submitPostButton = document.querySelector('.js-submitPostFields');
  var elementToRemove = elementRow.nextElementSibling;
  elementToRemove.remove();
  refreshPostArrows();
  var rows = document.querySelectorAll('.js-postFieldsDataRow');
  var metaFields = []; // eslint-disable-next-line no-restricted-syntax

  var _iterator3 = _createForOfIteratorHelper(rows),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var row = _step3.value;
      var index = row.dataset.index;
      metaFields.push(index);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  var removeJSON = JSON.stringify(metaFields);
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  submitPostButton.disabled = true;
  /* Launches the Rest request to write fields */

  apiFetch({
    path: path,
    method: 'DELETE',
    body: removeJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    submitPostButton.disabled = false;
    submitPostButton.blur();
    Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();

    if (fields.error) {}
  });
}

function addPostRow(elementRow, path) {
  var table = elementRow.parentElement;
  var oldRow = document.querySelector('.js-postFieldsDataRow[data-index="0"]');
  var newRow = oldRow.cloneNode(true);
  newRow.dataset.index = Number(elementRow.dataset.index) + 1;
  var fieldID = newRow.querySelector('.js-postFieldID');
  fieldID.value = '';
  fieldID.name = "post_id[".concat(newRow.dataset.index, "]");
  var fieldName = newRow.querySelector('.js-postFieldName');
  fieldName.value = '';
  fieldName.name = "field_name[".concat(newRow.dataset.index, "]"); // start removing the content of the previous row

  newRow.classList.remove('is-error');
  newRow.querySelector('.js-fieldAction[value="read"]').disabled = false;
  newRow.querySelector('.js-fieldAction[value="write"]').disabled = true;
  newRow.querySelector('.js-fieldAction[value="delete"]').disabled = true;
  newRow.querySelector('.js-fieldAction[value="read"]').name = "field_action[".concat(newRow.dataset.index, "]");
  newRow.querySelector('.js-fieldAction[value="write"]').name = "field_action[".concat(newRow.dataset.index, "]");
  newRow.querySelector('.js-fieldAction[value="delete"]').name = "field_action[".concat(newRow.dataset.index, "]"); // manages the error message

  var fieldErrorMessage = newRow.querySelector('.js-fieldErrorMessage');
  fieldErrorMessage.innerHTML = '';
  fieldErrorMessage.classList.add('is-hidden'); // manages the empty array checkbox

  var emptyArrayCheckbox = newRow.querySelector('.js-emptyArray');
  emptyArrayCheckbox.checked = false;
  emptyArrayCheckbox.disabled = true;
  emptyArrayCheckbox.name = "empty_array[".concat(newRow.dataset.index, "]"); // manages the date string checkbox

  var dateStringCheckbox = newRow.querySelector('.js-dateString');
  dateStringCheckbox.checked = false;
  dateStringCheckbox.disabled = true;
  dateStringCheckbox.name = "date_string[".concat(newRow.dataset.index, "]"); // input value box

  var metaFieldInputValue = newRow.querySelector('.js-metaFieldInputValue');
  metaFieldInputValue.value = '';
  metaFieldInputValue.disabled = true;
  metaFieldInputValue.name = "field_value[".concat(newRow.dataset.index, "]"); // Current value

  var fieldCurrentValue = newRow.querySelector('.js-fieldCurrentValue');
  fieldCurrentValue.innerHTML = ''; // Current value date-string option

  var currentValueDateToggle = newRow.querySelector('.js-curValueDateToggle');
  currentValueDateToggle.classList.remove('is-visible');
  currentValueDateToggle.classList.add('is-hidden');
  var currentValueDateToggleCheckbox = newRow.querySelector('.js-fieldDateStringCurValue');
  currentValueDateToggleCheckbox.name = "date_string_show[".concat(newRow.dataset.index, "]"); // Previous value

  var fieldPreviousValue = newRow.querySelector('.js-fieldPreviousValue');
  fieldPreviousValue.innerHTML = '';
  table.appendChild(newRow);
  refreshPostArrows();
  var submitPostButton = document.querySelector('.js-submitPostFields');
  var addJSON = JSON.stringify(newRow.dataset.index);
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  submitPostButton.disabled = true;
  /* Launches the Rest request to write fields */

  apiFetch({
    path: path,
    method: 'POST',
    body: addJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    submitPostButton.disabled = false;
    submitPostButton.blur();
    Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();

    if (fields.error) {}
  });
}

function checkOptionEvent(e) {
  var element = e.target;
  var restBase = 'options';
  var updateBase = "".concat(restBase, "/update");
  var path = "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(updateBase);

  if (!element.classList.contains('js-addRemoveOptionRow')) {
    return;
  }

  var elementRow = element.parentElement;

  if (element.innerText === '-') {
    removeOptionRow(elementRow, path);
  } else {
    addOptionRow(elementRow, path);
  }
}

function checkUserEvent(e) {
  var element = e.target;
  var restBase = 'user_fields';
  var updateBase = "".concat(restBase, "/update");
  var path = "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(updateBase);

  if (!element.classList.contains('js-addRemoveUserRow')) {
    return;
  }

  var elementRow = element.parentElement;

  if (element.innerText === '-') {
    removeUserRow(elementRow, path);
  } else {
    addUserRow(elementRow, path);
  }
}

function checkPostEvent(e) {
  var element = e.target;
  var restBase = 'post_fields';
  var updateBase = "".concat(restBase, "/update");
  var path = "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(updateBase);

  if (!element.classList.contains('js-addRemovePostRow')) {
    return;
  }

  var elementRow = element.parentElement;

  if (element.innerText === '-') {
    removePostRow(elementRow, path);
  } else {
    addPostRow(elementRow, path);
  }
}

window.addEventListener('load', addArrows, false); // optionSection.addEventListener('click', checkOptionEvent, false);
// userMetaSection.addEventListener('click', checkUserEvent, false);
// postMetaSection.addEventListener('click', checkPostEvent, false);

/***/ }),

/***/ "./src/js/components/Arrow.js":
/*!************************************!*\
  !*** ./src/js/components/Arrow.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* eslint-disable react/jsx-filename-extension,react/react-in-jsx-scope,react/prop-types,no-undef,react/prefer-stateless-function */

/* eslint-disable import/extensions */


function Arrow(props) {
  var className = props.className,
      title = props.title,
      content = props.content,
      harrowClickProp = props.arrowClick;
  var arrowRef = Object(react__WEBPACK_IMPORTED_MODULE_0__["createRef"])();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(function () {
    var optionRow = arrowRef.current.parentElement;
    arrowRef.current.style.top = "".concat(optionRow.offsetTop + optionRow.offsetHeight - 10, "px");
  }, [arrowRef]);

  function handleArrowClick(e) {
    var index;

    if (content === '-') {
      index = e.target.parentElement.nextElementSibling.dataset.index;
    } else {
      index = e.target.parentElement.dataset.index;
    }

    harrowClickProp(index, content);
  }

  return wp.element.createElement("div", {
    className: className,
    title: title,
    ref: arrowRef,
    onClick: handleArrowClick
  }, content);
}

/* harmony default export */ __webpack_exports__["default"] = (Arrow);

/***/ }),

/***/ "./src/js/components/FieldName.js":
/*!****************************************!*\
  !*** ./src/js/components/FieldName.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


/* eslint-disable react/jsx-filename-extension,react/react-in-jsx-scope,react/prop-types,no-undef,react/prefer-stateless-function */

function FieldName(_ref) {
  var className = _ref.className,
      inputValue = _ref.inputValue,
      updateFieldName = _ref.fieldNameValue,
      inputName = _ref.inputName,
      inputType = _ref.inputType,
      inputClass = _ref.inputClass,
      errorClassName = _ref.errorClassName,
      errorMessageClassName = _ref.errorMessageClassName,
      errorMessage = _ref.errorMessage,
      action = _ref.action;

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(''),
      _useState2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState, 2),
      fieldNameValue = _useState2[0],
      setFieldNameValue = _useState2[1];

  var actionRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["createRef"])();
  var updateFieldNameValue = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(function (e) {
    setFieldNameValue(e.target.value);
    updateFieldName(e.target.value);
  }, [updateFieldName]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    if (action === 'write' || action === 'delete') {
      actionRef.current.disabled = true;
    } else {
      actionRef.current.disabled = false;
    }
  }, [action, actionRef]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    setFieldNameValue(inputValue);
  }, [inputValue]);
  return wp.element.createElement("div", {
    className: className
  }, wp.element.createElement("div", {
    className: errorClassName
  }, wp.element.createElement("p", {
    className: errorMessageClassName
  }, errorMessage)), wp.element.createElement("input", {
    className: inputClass,
    type: inputType,
    name: inputName,
    value: fieldNameValue,
    ref: actionRef,
    onChange: updateFieldNameValue
  }));
}

/* harmony default export */ __webpack_exports__["default"] = (FieldName);

/***/ }),

/***/ "./src/js/components/MetaFieldActions.js":
/*!***********************************************!*\
  !*** ./src/js/components/MetaFieldActions.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


/* eslint-disable react/jsx-filename-extension,react/react-in-jsx-scope,react/prop-types,no-undef,react/prefer-stateless-function */

/* eslint-disable import/extensions */


function MetaFieldActions(_ref) {
  var className = _ref.className,
      dataIndex = _ref.dataIndex,
      onChangeProp = _ref.onChange,
      resetPage = _ref.resetPage,
      restoreEvent = _ref.restoreEvent;

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])('read'),
      _useState2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState, 2),
      action = _useState2[0],
      setAction = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(true),
      _useState4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState3, 2),
      readChecked = _useState4[0],
      setReadChecked = _useState4[1];

  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false),
      _useState6 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState5, 2),
      writeChecked = _useState6[0],
      setWriteChecked = _useState6[1];

  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false),
      _useState8 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState7, 2),
      deleteChecked = _useState8[0],
      setDeleteChecked = _useState8[1];

  var readRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();

  function actionSet(e) {
    setAction(e.target.value);
    onChangeProp(e);
  }

  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    if (resetPage) {
      readRef.current.click();
      restoreEvent();
    }
  }, [resetPage, restoreEvent]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    if (action === 'read') {
      setReadChecked(true);
      setWriteChecked(false);
      setDeleteChecked(false);
    }

    if (action === 'write') {
      setReadChecked(false);
      setWriteChecked(true);
      setDeleteChecked(false);
    }

    if (action === 'delete') {
      setReadChecked(false);
      setWriteChecked(false);
      setDeleteChecked(true);
    }
  }, [action]);
  return wp.element.createElement("div", {
    className: className
  }, wp.element.createElement("label", null, wp.element.createElement("input", {
    className: "js-fieldAction",
    type: "radio",
    name: "field_action[".concat(dataIndex, "]"),
    value: "read",
    onChange: actionSet,
    checked: readChecked,
    ref: readRef
  }), "Read"), wp.element.createElement("label", null, wp.element.createElement("input", {
    className: "js-fieldAction",
    type: "radio",
    name: "field_action[".concat(dataIndex, "]"),
    value: "write",
    onChange: actionSet,
    checked: writeChecked
  }), "Write"), wp.element.createElement("label", null, wp.element.createElement("input", {
    className: "js-fieldAction",
    type: "radio",
    name: "field_action[".concat(dataIndex, "]"),
    value: "delete",
    onChange: actionSet,
    checked: deleteChecked
  }), "Delete"));
}

/* harmony default export */ __webpack_exports__["default"] = (MetaFieldActions);

/***/ }),

/***/ "./src/js/components/MetaFieldCurrentValue.js":
/*!****************************************************!*\
  !*** ./src/js/components/MetaFieldCurrentValue.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* eslint-disable react/jsx-filename-extension,react/react-in-jsx-scope */
// eslint-disable-next-line react/prop-types
var MetaFieldCurrentValue = function MetaFieldCurrentValue(_ref) {
  var className = _ref.className,
      currentValue = _ref.currentValue;
  return wp.element.createElement("div", {
    className: className
  }, currentValue);
};

/* harmony default export */ __webpack_exports__["default"] = (MetaFieldCurrentValue);

/***/ }),

/***/ "./src/js/components/MetaFieldCurrentValueOptions.js":
/*!***********************************************************!*\
  !*** ./src/js/components/MetaFieldCurrentValueOptions.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../functions.js */ "./src/js/functions.js");


/* eslint-disable react/jsx-filename-extension,react/react-in-jsx-scope,react/prop-types,no-undef,react/prefer-stateless-function */

/* eslint-disable import/extensions */



function MetaFieldCurrentValueOptions(_ref) {
  var className = _ref.className,
      dataIndex = _ref.dataIndex,
      currentValue = _ref.currentValue,
      onChange = _ref.onChange;

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])('is-visible'),
      _useState2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState, 2),
      curValueDateToggle = _useState2[0],
      setCurValueDateToggle = _useState2[1];

  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    if (Object(_functions_js__WEBPACK_IMPORTED_MODULE_2__["isDate"])(currentValue)) {
      setCurValueDateToggle('is-visible');
    } else {
      setCurValueDateToggle('is-hidden');
    }
  }, [currentValue]);
  return wp.element.createElement("div", {
    className: className
  }, wp.element.createElement("label", {
    className: "js-curValueDateToggle c-optionField__fieldCurValueOption ".concat(curValueDateToggle)
  }, wp.element.createElement("p", null, "Toggle date string/timestamp"), wp.element.createElement("input", {
    className: "js-fieldDateStringCurValue",
    type: "checkbox",
    name: "date_string_show[".concat(dataIndex, "]"),
    value: "",
    onChange: onChange
  })));
}

/* harmony default export */ __webpack_exports__["default"] = (MetaFieldCurrentValueOptions);

/***/ }),

/***/ "./src/js/components/MetaFieldPreviousValue.js":
/*!*****************************************************!*\
  !*** ./src/js/components/MetaFieldPreviousValue.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* eslint-disable react/jsx-filename-extension,react/react-in-jsx-scope */
// eslint-disable-next-line react/prop-types
var MetaFieldPreviousValue = function MetaFieldPreviousValue(_ref) {
  var className = _ref.className,
      previousValue = _ref.previousValue;
  return wp.element.createElement("div", {
    className: className
  }, previousValue);
};

/* harmony default export */ __webpack_exports__["default"] = (MetaFieldPreviousValue);

/***/ }),

/***/ "./src/js/components/MetaFieldValueToAdd.js":
/*!**************************************************!*\
  !*** ./src/js/components/MetaFieldValueToAdd.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../functions.js */ "./src/js/functions.js");


/* eslint-disable react/jsx-filename-extension,react/react-in-jsx-scope,react/prop-types,no-undef,react/prefer-stateless-function */

/* eslint-disable import/extensions,jsx-a11y/label-has-associated-control */



function MetaFieldValueToAdd(props) {
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(0),
      _useState2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState, 2),
      timeStampBackup = _useState2[0],
      setTimeStampBackup = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(''),
      _useState4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState3, 2),
      inputStringBackup = _useState4[0],
      setInputStringBackup = _useState4[1];

  var emptyArrayRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["createRef"])();
  var toggleDateRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["createRef"])();
  var textAreaRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["createRef"])();
  var className = props.className,
      valueOptionsClass = props.valueOptionsClass,
      valueOptionsLabelClass = props.valueOptionsLabelClass,
      textAreaClass = props.textAreaClass,
      dataIndex = props.dataIndex,
      action = props.action,
      emptyArrayChange = props.emptyArray,
      updateValueToAdd = props.valueToAdd,
      resetPage = props.resetPage;
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    if (resetPage) {
      textAreaRef.current.value = '';
      emptyArrayRef.current.checked = false;
      toggleDateRef.current.checked = false;
      emptyArrayChange(false);
      updateValueToAdd('');
    }
  }, [emptyArrayChange, emptyArrayRef, resetPage, textAreaRef, toggleDateRef, updateValueToAdd]);

  function emptyArrayCheckbox() {
    emptyArrayChange(emptyArrayRef.current.checked);
  }
  /* Manages the toggle date checkbox */


  function toggleDate() {
    /* Is the current value an integer (that could be interpreted as a timestamp)? */
    if (Object(_functions_js__WEBPACK_IMPORTED_MODULE_2__["isInteger"])(textAreaRef.current.value)) {
      if (textAreaRef.current.value === timeStampBackup) {
        // if the value hasn't changed use the date string saved
        textAreaRef.current.value = inputStringBackup;
      } else {
        // if the value has changed re-generate the date string
        var timestamp = textAreaRef.current.value;
        setTimeStampBackup(timestamp);
        var myDate = new Date(parseInt(timestamp, 10));
        textAreaRef.current.value = myDate.toUTCString();
        setInputStringBackup(textAreaRef.current.value);
      }
      /* If the current value is backed up it means that we also have its timestamp stored. Use that. */

    } else if (textAreaRef.current.value === inputStringBackup) {
      // if the date string hasn't changed use the timestamp saved
      textAreaRef.current.value = timeStampBackup;
    } else {
      // if the date string has changed re-generate the timestamp
      var _myDate = new Date(textAreaRef.current.value);

      var dateString = textAreaRef.current.value;
      setInputStringBackup(dateString);
      textAreaRef.current.value = _myDate.valueOf();
      setTimeStampBackup(textAreaRef.current.value);
    } // Sends upstream the updated value


    updateValueToAdd(textAreaRef.current.value);
  }

  var textAreaContent = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(function () {
    // Sends upstream the updated value
    updateValueToAdd(textAreaRef.current.value);
    toggleDateRef.current.disabled = !Object(_functions_js__WEBPACK_IMPORTED_MODULE_2__["isDate"])(textAreaRef.current.value);
  }, [textAreaRef, toggleDateRef, updateValueToAdd]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    if (action === 'read' || action === 'delete') {
      emptyArrayRef.current.disabled = true;
      toggleDateRef.current.disabled = true;
      textAreaRef.current.disabled = true;
    } else {
      emptyArrayRef.current.disabled = false;
      textAreaRef.current.disabled = false;
      textAreaContent();
    }
  }, [action, emptyArrayRef, textAreaContent, textAreaRef, toggleDateRef]);
  /* TODO for some reasons, if I move this line under the function emptyArrayCheckbox (where it logically belongs)
      it doesn't work anymore. WHY? */

  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    textAreaRef.current.disabled = emptyArrayRef.current.checked;
  }, [emptyArrayRef, textAreaRef]);
  return wp.element.createElement("div", {
    className: className
  }, wp.element.createElement("div", {
    className: valueOptionsClass
  }, wp.element.createElement("label", {
    className: valueOptionsLabelClass
  }, wp.element.createElement("input", {
    className: "js-fieldValueToAdd js-emptyArray",
    type: "checkbox",
    name: "empty_array[".concat(dataIndex, "]"),
    value: "empty_array",
    ref: emptyArrayRef,
    onChange: emptyArrayCheckbox
  }), wp.element.createElement("p", {
    title: "Replace the field content with an empty array"
  }, "Add empty array")), wp.element.createElement("label", {
    className: valueOptionsLabelClass
  }, wp.element.createElement("input", {
    className: "js-fieldValueToAdd js-dateString",
    type: "checkbox",
    name: "date_string[".concat(dataIndex, "]"),
    value: "date_string",
    ref: toggleDateRef,
    onChange: toggleDate
  }), wp.element.createElement("p", null, "Toggle date string/timestamp"))), wp.element.createElement("textarea", {
    className: textAreaClass,
    name: "field_value[".concat(dataIndex, "]"),
    rows: "2",
    ref: textAreaRef,
    onChange: textAreaContent
  }));
}

/* harmony default export */ __webpack_exports__["default"] = (MetaFieldValueToAdd);

/***/ }),

/***/ "./src/js/components/OptionsMetaHeaders.js":
/*!*************************************************!*\
  !*** ./src/js/components/OptionsMetaHeaders.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

var __ = wp.i18n.__;

var OptionsMetaHeaders = function OptionsMetaHeaders(_ref) {
  var className = _ref.className;
  return wp.element.createElement("div", {
    className: className
  }, wp.element.createElement("div", null, "Option Name"), wp.element.createElement("div", null, __('Actions', 'dapre-cft')), wp.element.createElement("div", null, __('Value to Add', 'dapre-cft')), wp.element.createElement("div", null, __('Current Value', 'dapre-cft')), wp.element.createElement("div", null, __('Current Value Options', 'dapre-cft')), wp.element.createElement("div", null, __('Previous Value', 'dapre-cft')));
};

/* harmony default export */ __webpack_exports__["default"] = (OptionsMetaHeaders);

/***/ }),

/***/ "./src/js/components/OptionsMetaRow.js":
/*!*********************************************!*\
  !*** ./src/js/components/OptionsMetaRow.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Arrow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Arrow.js */ "./src/js/components/Arrow.js");
/* harmony import */ var _FieldName_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FieldName.js */ "./src/js/components/FieldName.js");
/* harmony import */ var _MetaFieldActions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MetaFieldActions.js */ "./src/js/components/MetaFieldActions.js");
/* harmony import */ var _MetaFieldValueToAdd_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./MetaFieldValueToAdd.js */ "./src/js/components/MetaFieldValueToAdd.js");
/* harmony import */ var _MetaFieldCurrentValue_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./MetaFieldCurrentValue.js */ "./src/js/components/MetaFieldCurrentValue.js");
/* harmony import */ var _MetaFieldCurrentValueOptions_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./MetaFieldCurrentValueOptions.js */ "./src/js/components/MetaFieldCurrentValueOptions.js");
/* harmony import */ var _MetaFieldPreviousValue_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MetaFieldPreviousValue.js */ "./src/js/components/MetaFieldPreviousValue.js");
/* harmony import */ var _functions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../functions */ "./src/js/functions.js");


/* eslint-disable react/jsx-filename-extension,react/react-in-jsx-scope,react/prop-types,no-undef,react/prefer-stateless-function */

/* eslint-disable import/extensions */










function OptionsMetaRow(props) {
  var className = props.className,
      rowIndex = props.rowIndex,
      dataIndex = props.dataIndex,
      fieldName = props.fieldName,
      errorClass = props.errorClass,
      errorMessage = props.errorMessage,
      previousValue = props.previousValue,
      disableWrite = props.disableWrite,
      disableDelete = props.disableDelete,
      arrowTitle = props.arrowTitle,
      arrowContent = props.arrowContent,
      currentValue = props.currentValue,
      updateForm = props.rowChange,
      resetPage = props.resetPage,
      restoreEvent = props.restoreEvent,
      arrowClickProp = props.arrowClick;

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])('read'),
      _useState2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState, 2),
      action = _useState2[0],
      setAction = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false),
      _useState4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState3, 2),
      addEmptyArray = _useState4[0],
      setAddEmptyArray = _useState4[1];

  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(''),
      _useState6 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState5, 2),
      valueToWrite = _useState6[0],
      setValueToWrite = _useState6[1];

  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(''),
      _useState8 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState7, 2),
      fieldNameValue = _useState8[0],
      setFieldNameValue = _useState8[1];

  var _useState9 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(''),
      _useState10 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState9, 2),
      currentValuePrinted = _useState10[0],
      setCurrentValuePrinted = _useState10[1];

  var _useState11 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])('-color-white'),
      _useState12 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState11, 2),
      classColor = _useState12[0],
      setClassColor = _useState12[1];

  var _useState13 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(0),
      _useState14 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState13, 2),
      currentValueOptionsTimestampBackup = _useState14[0],
      setCurrentValueOptionsTimestampBackup = _useState14[1];

  var _useState15 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(''),
      _useState16 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_useState15, 2),
      currentValueOptionsDateBackup = _useState16[0],
      setCurrentValueOptionsDateBackup = _useState16[1];

  var optionNameRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["createRef"])();
  /* Updates the form row to send upstream. */

  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    var row = {
      rowIndex: rowIndex,
      optionName: fieldNameValue,
      valueToWrite: valueToWrite,
      index: dataIndex,
      emptyArray: addEmptyArray,
      action: action
    };
    updateForm(row);
  }, [action, addEmptyArray, dataIndex, fieldNameValue, rowIndex, updateForm, valueToWrite]);
  /* Updates the field name value when the user changes it */

  var updateFieldNameValue = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(function (value) {
    setFieldNameValue(value);
  }, []);
  /* Initializes the field name value on first load */

  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    setFieldNameValue(fieldName);
  }, [fieldName]);
  /* Updates the field value to write when the user changes it */

  var updateValueToWrite = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(function (textAreaValue) {
    setValueToWrite(textAreaValue);
  }, []);
  var updateEmptyArrayChange = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(function (checkboxState) {
    setAddEmptyArray(checkboxState);
  }, []);
  var updateAction = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(function (e) {
    setAction(e.target.value);
  }, []);
  /* Toggles between date string and timestamp when the current value is a valid date.
  * It's important to notice that this function can be called only when the current value is a valid date,
  * therefore we don't need to check. */

  var toggleDateCurrentValue = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(function () {
    /* Is the current value an integer (that could be interpreted as a timestamp)? */
    if (Object(_functions__WEBPACK_IMPORTED_MODULE_9__["isInteger"])(currentValuePrinted)) {
      if (parseInt(currentValuePrinted, 10) === currentValueOptionsTimestampBackup) {
        // if the value hasn't changed use the date string saved
        setCurrentValuePrinted(currentValueOptionsDateBackup);
      } else {
        // if the value has changed re-generate the date string
        var timestamp = parseInt(currentValuePrinted, 10);
        setCurrentValueOptionsTimestampBackup(timestamp);
        var myDate = new Date(timestamp);
        setCurrentValuePrinted(myDate.toUTCString());
        setCurrentValueOptionsDateBackup(myDate.toUTCString());
      }
      /* If the current value is backed up it means that we also have its timestamp stored. Use that. */

    } else if (currentValuePrinted === currentValueOptionsDateBackup) {
      // if the date string hasn't changed use the timestamp saved
      setCurrentValuePrinted(parseInt(currentValueOptionsTimestampBackup, 10));
    } else {
      // if the date string has changed re-generate the timestamp
      var _myDate = new Date(currentValuePrinted);

      setCurrentValueOptionsDateBackup(currentValuePrinted);
      setCurrentValuePrinted(_myDate.valueOf());
      setCurrentValueOptionsTimestampBackup(_myDate.valueOf());
    }
  }, [currentValueOptionsDateBackup, currentValueOptionsTimestampBackup, currentValuePrinted]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    if (action === 'read') {
      setClassColor('-color-white');
    }

    if (action === 'write') {
      setClassColor('-color-blue');
    }

    if (action === 'delete') {
      setClassColor('-color-orange');
    }
  }, [action]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(function () {
    setCurrentValuePrinted(currentValue);
  }, [currentValue]);

  function handleArrowClick(index, content) {
    arrowClickProp(index, content);
  }

  return wp.element.createElement("div", {
    className: "".concat(className, " ").concat(errorClass, " ").concat(classColor),
    "data-index": dataIndex
  }, wp.element.createElement(_Arrow_js__WEBPACK_IMPORTED_MODULE_2__["default"], {
    className: "js-addRemoveOptionRow c-addRemoveFieldRow c-addRemoveFieldRow__add",
    title: arrowTitle,
    content: arrowContent,
    arrowClick: handleArrowClick
  }), wp.element.createElement(_FieldName_js__WEBPACK_IMPORTED_MODULE_3__["default"], {
    className: "c-optionField__fieldName",
    errorClassName: "c-optionField__fieldErrorContainer",
    errorMessageClassName: "js-fieldErrorMessage c-optionField__fieldErrorMessage",
    inputClass: "js-optionFieldName c-optionField__fieldInput",
    inputType: "text",
    inputName: "field_name",
    inputValue: fieldNameValue,
    fieldNameValue: updateFieldNameValue,
    errorMessage: errorMessage,
    action: action,
    ref: optionNameRef
  }), wp.element.createElement(_MetaFieldActions_js__WEBPACK_IMPORTED_MODULE_4__["default"], {
    className: "c-optionField__fieldActions",
    dataIndex: dataIndex,
    onChange: updateAction,
    resetPage: resetPage,
    restoreEvent: restoreEvent
  }), wp.element.createElement(_MetaFieldValueToAdd_js__WEBPACK_IMPORTED_MODULE_5__["default"], {
    className: "c-optionField__fieldValueToAdd",
    valueOptionsClass: "c-optionField__fieldValueOptions",
    valueOptionsLabelClass: "c-optionField__fieldValueOptionLabel",
    textAreaClass: "js-metaFieldInputValue c-optionField__fieldValueToAddTextarea",
    disableWrite: disableWrite,
    disableDelete: disableDelete,
    dataIndex: dataIndex,
    action: action,
    emptyArray: updateEmptyArrayChange,
    valueToAdd: updateValueToWrite,
    resetPage: resetPage
  }), wp.element.createElement(_MetaFieldCurrentValue_js__WEBPACK_IMPORTED_MODULE_6__["default"], {
    className: "js-fieldCurrentValue c-optionField__fieldCurValue",
    currentValue: currentValuePrinted
  }), wp.element.createElement(_MetaFieldCurrentValueOptions_js__WEBPACK_IMPORTED_MODULE_7__["default"], {
    className: "c-optionField__fieldCurValueOptions",
    currentValue: currentValue,
    dataIndex: dataIndex,
    onChange: toggleDateCurrentValue
  }), wp.element.createElement(_MetaFieldPreviousValue_js__WEBPACK_IMPORTED_MODULE_8__["default"], {
    className: "js-fieldPreviousValue c-optionField__fieldPrevValue",
    previousValue: previousValue
  }));
}

/* harmony default export */ __webpack_exports__["default"] = (OptionsMetaRow);

/***/ }),

/***/ "./src/js/controller.js":
/*!******************************!*\
  !*** ./src/js/controller.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tab_navigation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tab-navigation.js */ "./src/js/tab-navigation.js");
/* harmony import */ var _meta_box_ui_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./meta-box-ui.js */ "./src/js/meta-box-ui.js");
/* harmony import */ var _copy_meta_ui_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./copy-meta-ui.js */ "./src/js/copy-meta-ui.js");
/* harmony import */ var _copy_meta_ui_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_copy_meta_ui_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _option_meta_actions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./option-meta-actions.js */ "./src/js/option-meta-actions.js");
/* harmony import */ var _user_meta_actions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./user-meta-actions.js */ "./src/js/user-meta-actions.js");
/* harmony import */ var _post_meta_actions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./post-meta-actions.js */ "./src/js/post-meta-actions.js");
/* harmony import */ var _add_remove_meta_row_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./add-remove-meta-row.js */ "./src/js/add-remove-meta-row.js");
/* harmony import */ var _tabs_render_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tabs-render.js */ "./src/js/tabs-render.js");
/* eslint-disable import/extensions */









/***/ }),

/***/ "./src/js/copy-meta-ui.js":
/*!********************************!*\
  !*** ./src/js/copy-meta-ui.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* eslint-disable func-names */
// const { apiFetch } = wp;
var copyOptionSection = document.querySelector('.js-copyOptionTo');
var copyUserMetaSection = document.querySelector('.js-copyUserFieldTo');
var copyPostMetaSection = document.querySelector('.js-copyPostFieldTo');
/* Get elements in the option tab */

var optionToUserField = document.querySelector('.js-optionToUserField');
var optionToOption = document.querySelector('.js-optionToOption');
var optionToPostField = document.querySelector('.js-optionToPostField');
/* Get elements in the user fields tab */

var userFieldToUserField = document.querySelector('.js-userFieldToUserField');
var userFieldToOption = document.querySelector('.js-userFieldToOption');
var userFieldToPostField = document.querySelector('.js-userFieldToPostField');
/* Get elements in the post fields tab */

var postFieldToUserField = document.querySelector('.js-postFieldToUserField');
var postFieldToOption = document.querySelector('.js-postFieldToOption');
var postFieldToPostField = document.querySelector('.js-postFieldToPostField');
/**
 * Slide up a box
 * @param element Element or box to slide up
 */

function slideUp(element) {
  element.classList.remove('is-open');
}
/**
 * Slide down a box
 * @param element Element or box to slide down
 */


function slideDown(element) {
  element.classList.add('is-open');
}
/* Select where to copy the option field */


var copyOptionDestinations = function copyOptionDestinations(e) {
  var element = e.target;

  if (element.value === 'option') {
    slideUp(optionToUserField);
    slideUp(optionToPostField);
    slideDown(optionToOption);
  }

  if (element.value === 'user field') {
    slideUp(optionToOption);
    slideUp(optionToPostField);
    slideDown(optionToUserField);
  }

  if (element.value === 'post field') {
    slideUp(optionToUserField);
    slideUp(optionToOption);
    slideDown(optionToPostField);
  }
};
/* Select where to copy the user field */


var copyUserFieldDestination = function copyUserFieldDestination(e) {
  var element = e.target;

  if (element.value === 'option') {
    slideUp(userFieldToUserField);
    slideUp(userFieldToPostField);
    slideDown(userFieldToOption);
  }

  if (element.value === 'user field') {
    slideUp(userFieldToOption);
    slideUp(userFieldToPostField);
    slideDown(userFieldToUserField);
  }

  if (element.value === 'post field') {
    slideUp(userFieldToOption);
    slideUp(userFieldToUserField);
    slideDown(userFieldToPostField);
  }
};
/**
 * Select where to copy the post field
 * @param e Top element that got the click
 */


var copyPostFieldDestination = function copyPostFieldDestination(e) {
  var element = e.target;

  if (element.value === 'option') {
    slideUp(postFieldToUserField);
    slideUp(postFieldToPostField);
    slideDown(postFieldToOption);
  }

  if (element.value === 'user field') {
    slideUp(postFieldToOption);
    slideUp(postFieldToPostField);
    slideDown(postFieldToUserField);
  }

  if (element.value === 'post field') {
    slideUp(postFieldToOption);
    slideUp(postFieldToUserField);
    slideDown(postFieldToPostField);
  }
};

copyOptionSection.addEventListener('click', copyOptionDestinations, false);
copyUserMetaSection.addEventListener('click', copyUserFieldDestination, false);
copyPostMetaSection.addEventListener('click', copyPostFieldDestination, false);

/***/ }),

/***/ "./src/js/functions.js":
/*!*****************************!*\
  !*** ./src/js/functions.js ***!
  \*****************************/
/*! exports provided: nameSpace, isNumber, isNormalInteger, isPositiveInteger, isInteger, isDate, spinnerOn, spinnerOff */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nameSpace", function() { return nameSpace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return isNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNormalInteger", function() { return isNormalInteger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPositiveInteger", function() { return isPositiveInteger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInteger", function() { return isInteger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDate", function() { return isDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spinnerOn", function() { return spinnerOn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spinnerOff", function() { return spinnerOff; });
var nameSpace = 'dapre-cft/v1';
/* eslint-disable no-param-reassign */

var isNumber = function isNumber(o) {
  // eslint-disable-next-line no-restricted-globals
  return !isNaN(o - 0) && o !== null && o !== '' && o !== false;
};
/*
 * Checks if the content of a field is an integer >0
 * Useful to check if the content of an ID field is valid */
// eslint-disable-next-line no-unused-vars

var isNormalInteger = function isNormalInteger(str) {
  return /^([1-9]\d*)$/.test(str);
};
var isPositiveInteger = function isPositiveInteger(str) {
  return /^([1-9]\d*)$/.test(str);
};
/*
 * Checks if the content of a field is an integer positive or negative
 * Useful to check timestamps */

var isInteger = function isInteger(value) {
  return /^-?\d+$/.test(value);
};
/* Returns true if value is either a valid timestamp or a valid string date */

var isDate = function isDate(value) {
  if (isInteger(value)) {
    return true;
  }

  var date = new Date(value);

  if (isNaN(date.valueOf())) {
    return false;
  }

  return true;
};
var spinnerOn = function spinnerOn() {
  var spinner = document.querySelector('.js-halfCircleSpinner');
  spinner.classList.remove('is-hidden');
};
var spinnerOff = function spinnerOff() {
  var spinner = document.querySelector('.js-halfCircleSpinner');
  spinner.classList.add('is-hidden');
};

/***/ }),

/***/ "./src/js/meta-box-ui.js":
/*!*******************************!*\
  !*** ./src/js/meta-box-ui.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions.js */ "./src/js/functions.js");
// eslint-disable-next-line import/extensions

var optionSection = document.querySelector('.js-optionsMetaSection');
var userMetaSection = document.querySelector('.js-userFieldsSection');
var postMetaSection = document.querySelector('.js-postFieldsSection'); // Change the color of the row field according to the option chosen

var changeFieldColor = function changeFieldColor(element) {
  var row = element.parentNode.parentNode.parentNode;
  var content = row.querySelector('.js-metaFieldInputValue');
  var toggleDateCheckbox = row.querySelector('.js-emptyArray');
  var arrayCheckbox = row.querySelector('.js-dateString');

  if (element.value === 'read') {
    row.classList.add('-color-white');
    row.classList.remove('-color-blue');
    row.classList.remove('-color-orange');
    content.disabled = true;
    toggleDateCheckbox.disabled = true;
    arrayCheckbox.disabled = true;
    element.checked = true;
  }

  if (element.value === 'write') {
    row.classList.add('-color-blue');
    row.classList.remove('-color-white');
    row.classList.remove('-color-orange');
    content.disabled = false;
    toggleDateCheckbox.disabled = false;
    arrayCheckbox.disabled = false;
    element.checked = true;
  }

  if (element.value === 'delete') {
    row.classList.add('-color-orange');
    row.classList.remove('-color-blue');
    row.classList.remove('-color-white');
    content.disabled = true;
    toggleDateCheckbox.disabled = true;
    arrayCheckbox.disabled = true;
    element.checked = true;
  }
};

var newValueOptions = function newValueOptions(element) {
  var inputBox = element.parentNode.parentNode.parentNode;
  var toggleDateCheckbox = inputBox.querySelector('.js-dateString');
  var arrayCheckbox = inputBox.querySelector('.js-emptyArray');
  var content = inputBox.querySelector('.js-metaFieldInputValue');

  if (element.value === 'empty_array') {
    // if the user checked the empty array checkbox then disable the toggle date and return
    if (element.checked === true) {
      toggleDateCheckbox.checked = false;
      content.disabled = true;
    } else if (element.checked === false) {
      content.disabled = false;
    }
  }

  if (element.value === 'date_string') {
    content.disabled = false;
    arrayCheckbox.checked = false; // get the elements used to backup the values

    var dateTimestampBackup = document.querySelector('.js-metaFieldInputTimestampBackup');
    var dateStringBackup = document.querySelector('.js-metaFieldInputStringBackup'); // if it is a number interpret as a timestamp

    if (Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["isNumber"])(content.value)) {
      if (content.value === dateTimestampBackup.value) {
        // if the value hasn't changed use the date string saved
        content.value = dateStringBackup.value;
      } else {
        // if the value has changed re-generate the date string
        var timestamp = content.value;
        dateTimestampBackup.value = timestamp;
        var dateInt = parseInt(timestamp, 10);
        var myDate = new Date(dateInt);
        content.value = myDate.toUTCString();
        dateStringBackup.value = content.value;
      }
    } else if (content.value !== null) {
      if (content.value === dateStringBackup.value) {
        // if the date string hasn't changed use the timestamp saved
        content.value = dateTimestampBackup.value;
      } else {
        // if the date string has changed re-generate the timestamp
        var _myDate = new Date(content.value); // eslint-disable-next-line no-restricted-globals


        if (isNaN(_myDate.valueOf())) {
          alert('Please use a valid string date');
          toggleDateCheckbox.checked = false;
        } else {
          var dateString = content.value;
          dateStringBackup.value = dateString;
          content.value = _myDate.valueOf();
          dateTimestampBackup.value = content.value;
        }
      }
    }
  }
};
/* Toggle between date string and timestamp representation of the current field content */


var curValueDateString = function curValueDateString(element) {
  var row = element.parentNode.parentNode.parentNode;
  var fieldContent = row.querySelector('.js-fieldCurrentValue');
  var toggleDateCheckbox = row.querySelector('.js-fieldDateStringCurValue'); // get the elements used to backup the values

  var dateTimestampBackup = row.querySelector('.js-fieldValueTimestampBackup');
  var dateStringBackup = row.querySelector('.js-fieldValueStringBackup'); // if it is a number interpret as a timestamp

  if (Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["isNumber"])(fieldContent.innerText)) {
    if (dateStringBackup.value) {
      // if there is a backup use it
      fieldContent.innerText = dateStringBackup.value;
    } else {
      var timestamp = fieldContent.innerText; // save the timestamp. Since the string is an approximation and loses the milliseconds
      // the backup guarantees that we get back the original timestamp

      dateTimestampBackup.value = timestamp;
      var dateInt = parseInt(fieldContent.innerText, 10);
      var myDate = new Date(dateInt);
      fieldContent.innerText = myDate.toUTCString();
      dateStringBackup.value = fieldContent.innerText;
    }
  } else if (dateTimestampBackup.value) {
    fieldContent.innerText = dateTimestampBackup.value;
  } else {
    var _myDate2 = new Date(fieldContent.innerText); // eslint-disable-next-line no-restricted-globals


    if (isNaN(_myDate2.valueOf())) {
      alert('Please use a valid string date');
      toggleDateCheckbox.checked = false;
    } else {
      var dateString = fieldContent.innerText;
      dateStringBackup.value = dateString;
      fieldContent.innerText = _myDate2.valueOf();
      dateTimestampBackup.value = fieldContent.innerText;
    }
  }
};

var checkEvent = function checkEvent(e) {
  e.preventDefault();
  var element = e.target;
  /* Manage the action option */

  if (element.classList.contains('js-fieldAction')) {
    changeFieldColor(element);
  }
  /* Manage the checkboxes with the value options */


  if (element.classList.contains('js-fieldValueToAdd')) {
    newValueOptions(element);
  }
  /* Manage the current value checkbox */


  if (element.classList.contains('js-fieldDateStringCurValue')) {
    curValueDateString(element);
  }
}; // optionSection.addEventListener('change', checkEvent, false);


userMetaSection.addEventListener('change', checkEvent, false);
postMetaSection.addEventListener('change', checkEvent, false);

/***/ }),

/***/ "./src/js/option-meta-actions.js":
/*!***************************************!*\
  !*** ./src/js/option-meta-actions.js ***!
  \***************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions.js */ "./src/js/functions.js");
/* harmony import */ var _add_remove_meta_row_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-remove-meta-row.js */ "./src/js/add-remove-meta-row.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-disable function-paren-newline */
// eslint-disable-next-line import/extensions
 // eslint-disable-next-line import/extensions

 // eslint-disable-next-line no-undef

var _wp = wp,
    apiFetch = _wp.apiFetch;
var submitOptionsButton = document.querySelector('.js-submitOptions');
var renameOptionsButton = document.querySelector('.js-submitRenameOption');
var copyOptionsButton = document.querySelector('.js-submitCopyOption');
var read = [];
var write = [];
var del = [];
var finishedWrite = false;
var finishedRead = false;
var finishedDel = false;
var restBase = 'options';
var renameBase = "".concat(restBase, "/rename");
var copyBase = "".concat(restBase, "/copy");
var path = "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(restBase);
/* Get the fields whose action is selected to 'write' */

function getWriteFields(row) {
  var index = row.dataset.index;
  var optionName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  var emptyArray = row.querySelector('.js-emptyArray').checked;
  var valueToWrite = row.querySelector('.js-metaFieldInputValue').value;
  var newValue = {
    index: index,
    optionName: optionName,
    emptyArray: emptyArray,
    valueToWrite: valueToWrite
  };
  write.push(newValue);
}
/* Get the fields whose action is selected to 'delete' */


function getDeleteFields(row) {
  var index = row.dataset.index;
  var optionName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  var newValue = {
    index: index,
    optionName: optionName
  };
  del.push(newValue);
}
/* Get the fields whose action is selected to 'read' */


function getReadFields(row) {
  var index = row.dataset.index;
  var optionName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  var newValue = {
    index: index,
    optionName: optionName
  };
  read.push(newValue);
}
/* Refresh the page of the meta fields with the data received */


function refreshPage(fields) {
  // eslint-disable-next-line no-restricted-syntax
  var _iterator = _createForOfIteratorHelper(fields),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var field = _step.value;
      var index = field.index;
      var row = document.querySelector(".js-optionFieldDataRow[data-index=\"".concat(index, "\"]")); // add/remove the red-dotted border

      if (field.error === '') {
        row.classList.remove('is-error');
      } else {
        row.classList.add('is-error');
      }

      row.querySelector('.js-fieldAction[value="read"]').click();
      row.querySelector('.js-fieldAction[value="write"]').disabled = field.disableWrite === 'disabled';

      if (field.disableDelete === 'disabled') {
        row.querySelector('.js-fieldAction[value="delete"]').disabled = true;
      } else {
        row.querySelector('.js-fieldAction[value="delete"]').disabled = false;
      } // manages the error message


      var fieldErrorMessage = row.querySelector('.js-fieldErrorMessage');

      if (field.fieldErrorClass === '') {
        fieldErrorMessage.classList.add('is-hidden');
      } else {
        fieldErrorMessage.classList.remove('is-hidden');
        fieldErrorMessage.innerHTML = field.error;
      } // manages the empty array checkbox


      var emptyArrayCheckbox = row.querySelector('.js-emptyArray');
      emptyArrayCheckbox.checked = false;
      emptyArrayCheckbox.disabled = true; // manages the date string checkbox

      var dateStringCheckbox = row.querySelector('.js-dateString');
      dateStringCheckbox.checked = false;
      dateStringCheckbox.disabled = true; // input value box

      var metaFieldInputValue = row.querySelector('.js-metaFieldInputValue');
      metaFieldInputValue.value = '';
      metaFieldInputValue.disabled = true; // Current value

      var fieldCurrentValue = row.querySelector('.js-fieldCurrentValue');
      fieldCurrentValue.innerHTML = JSON.parse(field.currentValue); // Current value date-string option

      var currentValueDateToggle = row.querySelector('.js-curValueDateToggle');

      if (field.curValueDateToggle === 'is-visible') {
        currentValueDateToggle.classList.add('is-visible');
        currentValueDateToggle.classList.remove('is-hidden');
      } else {
        currentValueDateToggle.classList.remove('is-visible');
        currentValueDateToggle.classList.add('is-hidden');
      } // Previous value


      var fieldPreviousValue = row.querySelector('.js-fieldPreviousValue');
      fieldPreviousValue.innerHTML = JSON.parse(field.previousValue);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (finishedWrite && finishedRead && finishedDel) {
    submitOptionsButton.disabled = false;
    submitOptionsButton.blur();
    Object(_add_remove_meta_row_js__WEBPACK_IMPORTED_MODULE_1__["refreshOptionArrows"])();
    Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();
    finishedWrite = false;
    finishedRead = false;
    finishedDel = false;
  }
}
/* Makes the API request for the 'read' action */


function readData() {
  if (read.length === 0) {
    finishedRead = true;
    return;
  }

  var readJSON = JSON.stringify(read);
  finishedRead = false;
  /* Launches the Rest request to read fields */

  apiFetch({
    path: "".concat(path, "?options=").concat(readJSON),
    method: 'GET',
    parse: false
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    finishedRead = true;
    refreshPage(fields);
  });
}
/* Makes the API request for the 'write' action */


function writeData() {
  if (write.length === 0) {
    finishedWrite = true;
    return;
  }

  var writeJSON = JSON.stringify(write);
  finishedWrite = false;
  /* Launches the Rest request to write fields */

  apiFetch({
    path: path,
    method: 'POST',
    body: writeJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    finishedWrite = true;
    refreshPage(fields);
  });
}
/* Makes the API request for the 'delete' action */


function deleteData() {
  if (del.length === 0) {
    finishedDel = true;
    return;
  }

  var delJSON = JSON.stringify(del);
  finishedDel = false;
  /* Launches the Rest request to delete fields */

  apiFetch({
    path: path,
    method: 'DELETE',
    body: delJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    finishedDel = true;
    refreshPage(fields);
  });
}
/* Gets the content of the form for the 'read|write|delete' actions */


function getMetaForm(e) {
  e.preventDefault();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  submitOptionsButton.disabled = true;
  write = [];
  read = [];
  del = [];
  var rows = document.querySelectorAll('.js-optionFieldDataRow');
  /* Reads all the rows and fill in the request objects */
  // eslint-disable-next-line no-restricted-syntax

  var _iterator2 = _createForOfIteratorHelper(rows),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var row = _step2.value;
      var fieldAction = row.querySelector('.js-fieldAction:checked').value;

      if (fieldAction === 'write') {
        getWriteFields(row);
      }

      if (fieldAction === 'delete') {
        getDeleteFields(row);
      }

      if (fieldAction === 'read') {
        getReadFields(row);
      }
    }
    /* Once all the rows have been read, launches the actions */

  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  readData();
  writeData();
  deleteData();
}
/* Refresh the rename section if the action has been completed successfully */


function refreshRenamePage(fields) {
  var lightbox;
  var oldOption = document.querySelector('.js-oldOptionName');
  var newOption = document.querySelector('.js-newOptionName');

  if (!fields.renamed) {
    lightbox = new Lightbox({
      openAnimation: 'jelly',
      closeAnimation: 'collapse'
    });
    lightbox.setTitle('ERROR');
  } else {
    lightbox = new Lightbox({
      openAnimation: 'fadein',
      closeAnimation: 'shrink'
    });
    lightbox.setTitle('Done'); // eslint-disable-next-line no-param-reassign

    oldOption.value = ''; // eslint-disable-next-line no-param-reassign

    newOption.value = '';
  }

  lightbox.setContent(fields.message);
  lightbox.open();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();
  renameOptionsButton.disabled = false;
}
/* Gets the content of the form for the 'rename' action */


function getRenameForm(e) {
  e.preventDefault();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  renameOptionsButton.disabled = true;
  var oldOptionName = document.querySelector('.js-oldOptionName').value;
  var newOptionName = document.querySelector('.js-newOptionName').value;
  /* Prepares the object for the Rest request */

  var rename = {
    oldOptionName: oldOptionName,
    newOptionName: newOptionName
  };
  var renameJSON = JSON.stringify(rename);
  /* Launches the Rest request to rename fields */

  apiFetch({
    path: "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(renameBase),
    method: 'POST',
    body: renameJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    refreshRenamePage(fields);
  });
}
/* Refresh the copy section if the action has been completed successfully */


function refreshCopyPage(fields, copySelection) {
  var checkboxCreate;
  var newOption;
  var userID;
  var userField;
  var postID;
  var postField;
  var lightbox;
  var currentOption = document.querySelector('.js-currentOptionName');

  if (fields.copied) {
    currentOption.value = '';
    lightbox = new Lightbox({
      openAnimation: 'fadein',
      closeAnimation: 'shrink'
    });
    lightbox.setTitle('Done');

    switch (copySelection) {
      case 'option':
        newOption = document.querySelector('.js-copyOptionToOptionName');
        checkboxCreate = document.querySelector('.js-copyOptionToOptionCreate');
        newOption.value = '';
        checkboxCreate.checked = false;
        break;

      case 'user field':
        userID = document.querySelector('.js-optToUserFieldID');
        userField = document.querySelector('.js-optToUserFieldName');
        checkboxCreate = document.querySelector('.js-optToUserFieldCreate');
        userID.value = '';
        userField.value = '';
        checkboxCreate.checked = false;
        break;

      case 'post field':
        postID = document.querySelector('.js-optToPostFieldID');
        postField = document.querySelector('.js-optToPostFieldName');
        checkboxCreate = document.querySelector('.js-optToPostFieldCreate');
        postID.value = '';
        postField.value = '';
        checkboxCreate.checked = false;
        break;

      default:
    }
  } else {
    lightbox = new Lightbox({
      openAnimation: 'jelly',
      closeAnimation: 'collapse'
    });
    lightbox.setTitle('ERROR');
  }

  lightbox.setContent(fields.message);
  lightbox.open();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();
  copyOptionsButton.disabled = false;
}
/* Gets the content of the form for the 'copy' action */


function getCopyForm(e) {
  e.preventDefault();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  copyOptionsButton.disabled = true;
  var copy;
  var checkboxCreate;
  var newOption;
  var userID;
  var userField;
  var postID;
  var postField;
  var currentOption = document.querySelector('.js-currentOptionName').value;
  var copySelection = document.querySelector('input[type=radio][name=copy_option_to]:checked').value;
  /* Checks where we must copy the option to and prepares the appropriate object for the Rest request */

  switch (copySelection) {
    case 'option':
      newOption = document.querySelector('.js-copyOptionToOptionName').value;
      checkboxCreate = document.querySelector('.js-copyOptionToOptionCreate').checked;
      copy = {
        currentOption: currentOption,
        copySelection: copySelection,
        newOption: newOption,
        checkboxCreate: checkboxCreate
      };
      break;

    case 'user field':
      userID = document.querySelector('.js-optToUserFieldID').value;
      userField = document.querySelector('.js-optToUserFieldName').value;
      checkboxCreate = document.querySelector('.js-optToUserFieldCreate').checked;
      copy = {
        currentOption: currentOption,
        copySelection: copySelection,
        userID: userID,
        userField: userField,
        checkboxCreate: checkboxCreate
      };
      break;

    case 'post field':
      postID = document.querySelector('.js-optToPostFieldID').value;
      postField = document.querySelector('.js-optToPostFieldName').value;
      checkboxCreate = document.querySelector('.js-optToPostFieldCreate').checked;
      copy = {
        currentOption: currentOption,
        copySelection: copySelection,
        postID: postID,
        postField: postField,
        checkboxCreate: checkboxCreate
      };
      break;

    default:
  }

  var copyJSON = JSON.stringify(copy);
  /* Launches the Rest request to copy fields */

  apiFetch({
    path: "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(copyBase),
    method: 'POST',
    body: copyJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    refreshCopyPage(fields, copySelection);
  });
} // submitOptionsButton.addEventListener('click', getMetaForm, false);


renameOptionsButton.addEventListener('click', getRenameForm, false);
copyOptionsButton.addEventListener('click', getCopyForm, true);

/***/ }),

/***/ "./src/js/post-meta-actions.js":
/*!*************************************!*\
  !*** ./src/js/post-meta-actions.js ***!
  \*************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions.js */ "./src/js/functions.js");
/* harmony import */ var _add_remove_meta_row_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-remove-meta-row.js */ "./src/js/add-remove-meta-row.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-disable function-paren-newline */
// eslint-disable-next-line import/extensions
 // eslint-disable-next-line import/extensions

 // eslint-disable-next-line no-undef

var _wp = wp,
    apiFetch = _wp.apiFetch;
var submitPostFieldsButton = document.querySelector('.js-submitPostFields');
var renamePostFieldsButton = document.querySelector('.js-submitRenamePostField');
var copyPostFieldsButton = document.querySelector('.js-submitCopyPostField');
var read = [];
var write = [];
var del = [];
var finishedWrite = false;
var finishedRead = false;
var finishedDel = false;
var restBase = 'post_fields';
var renameBase = "".concat(restBase, "/rename");
var copyBase = "".concat(restBase, "/copy");
var path = "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(restBase);
/* Get the fields whose action is selected to 'write' */

function getWriteFields(row) {
  var index = row.dataset.index;
  var postID = row.querySelector("input[name=\"post_id[".concat(index, "]\"]")).value;
  var fieldName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  var emptyArray = row.querySelector('.js-emptyArray').checked;
  var valueToWrite = row.querySelector('.js-metaFieldInputValue').value;
  var newValue = {
    index: index,
    postID: postID,
    fieldName: fieldName,
    emptyArray: emptyArray,
    valueToWrite: valueToWrite
  };
  write.push(newValue);
}
/* Get the fields whose action is selected to 'delete' */


function getDeleteFields(row) {
  var index = row.dataset.index;
  var postID = row.querySelector("input[name=\"post_id[".concat(index, "]\"]")).value;
  var fieldName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  var newValue = {
    index: index,
    postID: postID,
    fieldName: fieldName
  };
  del.push(newValue);
}
/* Get the fields whose action is selected to 'read' */


function readFields(row) {
  var index = row.dataset.index;
  var postID = row.querySelector("input[name=\"post_id[".concat(index, "]\"]")).value;
  var fieldName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  var newValue = {
    index: index,
    postID: postID,
    fieldName: fieldName
  };
  read.push(newValue);
}
/* Refresh the page of the meta fields with the data received */


function refreshPage(fields) {
  // eslint-disable-next-line no-restricted-syntax
  var _iterator = _createForOfIteratorHelper(fields),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var field = _step.value;
      var index = field.index;
      var row = document.querySelector(".js-postFieldsDataRow[data-index=\"".concat(index, "\"]")); // add/remove the red-dotted border

      if (field.error === '') {
        row.classList.remove('is-error');
      } else {
        row.classList.add('is-error');
      }

      row.querySelector('.js-fieldAction[value="read"]').click();
      row.querySelector('.js-fieldAction[value="write"]').disabled = field.disableWrite === 'disabled';

      if (field.disableDelete === 'disabled') {
        row.querySelector('.js-fieldAction[value="delete"]').disabled = true;
      } else {
        row.querySelector('.js-fieldAction[value="delete"]').disabled = false;
      } // manages the error message


      var fieldErrorMessage = row.querySelector('.js-fieldErrorMessage');

      if (field.fieldErrorClass === '') {
        fieldErrorMessage.classList.add('is-hidden');
      } else {
        fieldErrorMessage.classList.remove('is-hidden');
        fieldErrorMessage.innerHTML = field.error;
      } // manages the empty array checkbox


      var emptyArrayCheckbox = row.querySelector('.js-emptyArray');
      emptyArrayCheckbox.checked = false;
      emptyArrayCheckbox.disabled = true; // manages the date string checkbox

      var dateStringCheckbox = row.querySelector('.js-dateString');
      dateStringCheckbox.checked = false;
      dateStringCheckbox.disabled = true; // input value box

      var metaFieldInputValue = row.querySelector('.js-metaFieldInputValue');
      metaFieldInputValue.value = '';
      metaFieldInputValue.disabled = true; // Current value

      var fieldCurrentValue = row.querySelector('.js-fieldCurrentValue');
      fieldCurrentValue.innerHTML = JSON.parse(field.currentValue); // Current value date-string option

      var currentValueDateToggle = row.querySelector('.js-curValueDateToggle');

      if (field.curValueDateToggle === 'is-visible') {
        currentValueDateToggle.classList.add('is-visible');
        currentValueDateToggle.classList.remove('is-hidden');
      } else {
        currentValueDateToggle.classList.remove('is-visible');
        currentValueDateToggle.classList.add('is-hidden');
      } // Previous value


      var fieldPreviousValue = row.querySelector('.js-fieldPreviousValue');
      fieldPreviousValue.innerHTML = JSON.parse(field.previousValue);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (finishedWrite && finishedRead && finishedDel) {
    submitPostFieldsButton.disabled = false;
    submitPostFieldsButton.blur();
    Object(_add_remove_meta_row_js__WEBPACK_IMPORTED_MODULE_1__["refreshPostArrows"])();
    Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();
    finishedWrite = false;
    finishedRead = false;
    finishedDel = false;
  }
}
/* Makes the API request for the 'read' action */


function readData() {
  if (read.length === 0) {
    finishedRead = true;
    return;
  }

  var readJSON = JSON.stringify(read);
  finishedRead = false;
  /* Launches the Rest request to read fields */

  apiFetch({
    path: "".concat(path, "?post_fields=").concat(readJSON),
    method: 'GET',
    parse: false
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    finishedRead = true;
    refreshPage(fields);
  });
}
/* Makes the API request for the 'write' action */


function writeData() {
  if (write.length === 0) {
    finishedWrite = true;
    return;
  }

  var writeJSON = JSON.stringify(write);
  finishedWrite = false;
  /* Launches the Rest request to write fields */

  apiFetch({
    path: path,
    method: 'POST',
    body: writeJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    finishedWrite = true;
    refreshPage(fields);
  });
}
/* Makes the API request for the 'delete' action */


function deleteData() {
  if (del.length === 0) {
    finishedDel = true;
    return;
  }

  var delJSON = JSON.stringify(del);
  finishedDel = false;
  /* Launches the Rest request to delete fields */

  apiFetch({
    path: path,
    method: 'DELETE',
    body: delJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    finishedDel = true;
    refreshPage(fields);
  });
}
/* Gets the content of the form for the 'read|write|delete' actions */


function getMetaForm(e) {
  e.preventDefault();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  submitPostFieldsButton.disabled = true;
  write = [];
  read = [];
  del = [];
  var rows = document.querySelectorAll('.js-postFieldsDataRow');
  /* Reads all the rows and fill in the request objects */
  // eslint-disable-next-line no-restricted-syntax

  var _iterator2 = _createForOfIteratorHelper(rows),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var row = _step2.value;
      var fieldAction = row.querySelector('.js-fieldAction:checked').value;

      if (fieldAction === 'write') {
        getWriteFields(row);
      }

      if (fieldAction === 'delete') {
        getDeleteFields(row);
      }

      if (fieldAction === 'read') {
        readFields(row);
      }
    }
    /* Once all the rows have been read, launches the actions */

  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  readData();
  writeData();
  deleteData();
}
/* Refresh the rename section if the action has been completed successfully */


function refreshRenamePage(fields) {
  var lightbox;
  var postID = document.querySelector('.js-postFieldRenamePostID');
  var oldFieldName = document.querySelector('.js-oldPostFieldName');
  var newFieldName = document.querySelector('.js-newPostFieldName');

  if (!fields.renamed) {
    lightbox = new Lightbox({
      openAnimation: 'jelly',
      closeAnimation: 'collapse'
    });
    lightbox.setTitle('ERROR');
  } else {
    lightbox = new Lightbox({
      openAnimation: 'fadein',
      closeAnimation: 'shrink'
    });
    lightbox.setTitle('Done'); // eslint-disable-next-line no-param-reassign

    postID.value = ''; // eslint-disable-next-line no-param-reassign

    oldFieldName.value = ''; // eslint-disable-next-line no-param-reassign

    newFieldName.value = '';
  }

  lightbox.setContent(fields.message);
  lightbox.open();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();
  renamePostFieldsButton.disabled = false;
}
/* Gets the content of the form for the 'rename' action */


function getRenameForm(e) {
  e.preventDefault();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  renamePostFieldsButton.disabled = true;
  var postID = document.querySelector('.js-postFieldRenamePostID').value;
  var oldFieldName = document.querySelector('.js-oldPostFieldName').value;
  var newFieldName = document.querySelector('.js-newPostFieldName').value;
  /* Prepares the object for the Rest request */

  var rename = {
    postID: postID,
    oldFieldName: oldFieldName,
    newFieldName: newFieldName
  };
  var renameJSON = JSON.stringify(rename);
  /* Launches the Rest request to rename fields */

  apiFetch({
    path: "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(renameBase),
    method: 'POST',
    body: renameJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    refreshRenamePage(fields);
  });
}
/* Refresh the copy section if the action has been completed successfully */


function refreshCopyPage(fields, copySelection) {
  var checkboxCreate;
  var newOption;
  var postID;
  var userField;
  var userID;
  var postField;
  var lightbox;
  var currentPostID = document.querySelector('.js-postFieldCopyPostID');
  var currentPostField = document.querySelector('.js-postFieldCopyFieldName');

  if (fields.copied) {
    currentPostID.value = '';
    currentPostField.value = '';
    lightbox = new Lightbox({
      openAnimation: 'fadein',
      closeAnimation: 'shrink'
    });
    lightbox.setTitle('Done');

    switch (copySelection) {
      case 'option':
        newOption = document.querySelector('.js-postFieldToOptionName');
        checkboxCreate = document.querySelector('.js-postFieldToOptionCreate');
        newOption.value = '';
        checkboxCreate.checked = false;
        break;

      case 'user field':
        userID = document.querySelector('.js-postFieldToUserFieldID');
        userField = document.querySelector('.js-postFieldToUserFieldName');
        checkboxCreate = document.querySelector('.js-postFieldToUserFieldCreate');
        userID.value = '';
        userField.value = '';
        checkboxCreate.checked = false;
        break;

      case 'post field':
        postID = document.querySelector('.js-postFieldToPostFieldID');
        postField = document.querySelector('.js-postFieldToPostFieldName');
        checkboxCreate = document.querySelector('.js-postFieldToPostFieldCreate');
        postID.value = '';
        postField.value = '';
        checkboxCreate.checked = false;
        break;

      default:
    }
  } else {
    lightbox = new Lightbox({
      openAnimation: 'jelly',
      closeAnimation: 'collapse'
    });
    lightbox.setTitle('ERROR');
  }

  lightbox.setContent(fields.message);
  lightbox.open();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();
  copyPostFieldsButton.disabled = false;
}
/* Gets the content of the form for the 'copy' action */


function getCopyForm(e) {
  e.preventDefault();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  copyPostFieldsButton.disabled = true;
  var copy;
  var checkboxCreate;
  var newOption;
  var userID;
  var userField;
  var postID;
  var postField;
  var currentPostID = document.querySelector('.js-postFieldCopyPostID').value;
  var currentFieldName = document.querySelector('.js-postFieldCopyFieldName').value;
  var copySelection = document.querySelector('input[type=radio][name=copy_post_field_to]:checked').value;
  /* Checks where we must copy the user field to and prepares the appropriate object for the Rest request */

  switch (copySelection) {
    case 'option':
      newOption = document.querySelector('.js-postFieldToOptionName').value;
      checkboxCreate = document.querySelector('.js-postFieldToOptionCreate').checked;
      copy = {
        currentPostID: currentPostID,
        currentFieldName: currentFieldName,
        copySelection: copySelection,
        newOption: newOption,
        checkboxCreate: checkboxCreate
      };
      break;

    case 'user field':
      userID = document.querySelector('.js-postFieldToUserFieldID').value;
      userField = document.querySelector('.js-postFieldToUserFieldName').value;
      checkboxCreate = document.querySelector('.js-postFieldToUserFieldCreate').checked;
      copy = {
        currentPostID: currentPostID,
        currentFieldName: currentFieldName,
        copySelection: copySelection,
        userID: userID,
        userField: userField,
        checkboxCreate: checkboxCreate
      };
      break;

    case 'post field':
      postID = document.querySelector('.js-postFieldToPostFieldID').value;
      postField = document.querySelector('.js-postFieldToPostFieldName').value;
      checkboxCreate = document.querySelector('.js-postFieldToPostFieldCreate').checked;
      copy = {
        currentPostID: currentPostID,
        currentFieldName: currentFieldName,
        copySelection: copySelection,
        postID: postID,
        postField: postField,
        checkboxCreate: checkboxCreate
      };
      break;

    default:
  }

  var copyJSON = JSON.stringify(copy);
  /* Launches the Rest request to copy fields */

  apiFetch({
    path: "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(copyBase),
    method: 'POST',
    body: copyJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    refreshCopyPage(fields, copySelection);
  });
}

submitPostFieldsButton.addEventListener('click', getMetaForm, false);
renamePostFieldsButton.addEventListener('click', getRenameForm, false);
copyPostFieldsButton.addEventListener('click', getCopyForm, true);

/***/ }),

/***/ "./src/js/tab-navigation.js":
/*!**********************************!*\
  !*** ./src/js/tab-navigation.js ***!
  \**********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _add_remove_meta_row_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add-remove-meta-row.js */ "./src/js/add-remove-meta-row.js");
// eslint-disable-next-line import/extensions

var tab1 = document.querySelector('.js-tab_1');
var tab2 = document.querySelector('.js-tab_2');
var tab3 = document.querySelector('.js-tab_3');
var optionsForm = document.querySelector('.js-optionsForm');
var userFieldsForm = document.querySelector('.js-userFieldsForm');
var postFieldsForm = document.querySelector('.js-postFieldsForm');

var hideOptionsTab = function hideOptionsTab() {
  tab1.classList.remove('nav-tab-active');
  optionsForm.classList.add('is-hidden');
};

var hideUsersTab = function hideUsersTab() {
  tab2.classList.remove('nav-tab-active');
  userFieldsForm.classList.add('is-hidden');
};

var hidePostsTab = function hidePostsTab() {
  tab3.classList.remove('nav-tab-active');
  postFieldsForm.classList.add('is-hidden');
};

var switchToOptionsTab = function switchToOptionsTab(e) {
  e.preventDefault();
  /* activate clicked tab and make section visible */

  tab1.classList.add('nav-tab-active');
  optionsForm.classList.remove('is-hidden');
  tab1.blur();
  Object(_add_remove_meta_row_js__WEBPACK_IMPORTED_MODULE_0__["refreshOptionArrows"])();
  /* deactivate other tabs and hides sections */

  hideUsersTab();
  hidePostsTab();
};

var switchToUsersTab = function switchToUsersTab(e) {
  e.preventDefault();
  /* activate clicked tab and make section visible */

  tab2.classList.add('nav-tab-active');
  userFieldsForm.classList.remove('is-hidden');
  tab2.blur();
  Object(_add_remove_meta_row_js__WEBPACK_IMPORTED_MODULE_0__["refreshUserArrows"])();
  /* deactivate other tabs and hides sections */

  hideOptionsTab();
  hidePostsTab();
};

var switchToPostsTab = function switchToPostsTab(e) {
  e.preventDefault();
  /* activate clicked tab and make section visible */

  tab3.classList.add('nav-tab-active');
  postFieldsForm.classList.remove('is-hidden');
  tab3.blur();
  Object(_add_remove_meta_row_js__WEBPACK_IMPORTED_MODULE_0__["refreshPostArrows"])();
  /* deactivate other tabs and hides sections */

  hideOptionsTab();
  hideUsersTab();
};

tab1.addEventListener('click', switchToOptionsTab, false);
tab2.addEventListener('click', switchToUsersTab, false);
tab3.addEventListener('click', switchToPostsTab, false);

/***/ }),

/***/ "./src/js/tab-options-meta.js":
/*!************************************!*\
  !*** ./src/js/tab-options-meta.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _components_OptionsMetaHeaders_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/OptionsMetaHeaders.js */ "./src/js/components/OptionsMetaHeaders.js");
/* harmony import */ var _components_OptionsMetaRow_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/OptionsMetaRow.js */ "./src/js/components/OptionsMetaRow.js");
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functions.js */ "./src/js/functions.js");



/* eslint-disable react/jsx-filename-extension,react/react-in-jsx-scope,react/prop-types,no-undef,react/prefer-stateless-function */

/* eslint-disable import/extensions,react/jsx-no-undef */


 // import ButtonSubmitMeta from './components/ButtonSubmitMeta.js';

 // eslint-disable-next-line no-undef

var _wp = wp,
    apiFetch = _wp.apiFetch;
var restBase = 'options';
var path = "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_5__["nameSpace"], "/").concat(restBase);

function TabOptionsMeta() {
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_2__["useState"])([]),
      _useState2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(_useState, 2),
      rows = _useState2[0],
      setRows = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_2__["useState"])([]),
      _useState4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(_useState3, 2),
      form = _useState4[0],
      setForm = _useState4[1];

  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_2__["useState"])(false),
      _useState6 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(_useState5, 2),
      resetPage = _useState6[0],
      setResetPage = _useState6[1];

  var read = [];
  var write = [];
  var del = [];
  var finishedRead = false;
  var finishedWrite = false;
  var finishedDel = false;

  function refreshPage() {
    if (!finishedRead || !finishedWrite || !finishedDel) return;
    var newOptions = read.concat(write).concat(del);
    var sortedOptions = newOptions.sort(function (a, b) {
      if (a.index < b.index) return -1;
      return 1;
    });
    setRows(sortedOptions);
    setResetPage(true);
  }
  /* Makes the API request for the 'read' action */


  function readData(dataToRead) {
    if (dataToRead.length === 0) {
      finishedRead = true;
      return;
    }

    var readJSON = JSON.stringify(dataToRead);
    finishedRead = false;
    /* Launches the Rest request to read fields */

    apiFetch({
      path: "".concat(path, "?options=").concat(readJSON),
      method: 'GET',
      parse: false
    }).then(function (response) {
      return response.json();
    }).then(function (fields) {
      finishedRead = true;
      read = fields;
      refreshPage();
    });
  }
  /* Makes the API request for the 'write' action */


  function writeData(dataToWrite) {
    if (dataToWrite.length === 0) {
      finishedWrite = true;
      return;
    }

    var writeJSON = JSON.stringify(dataToWrite);
    finishedWrite = false;
    console.log(dataToWrite);
    /* Launches the Rest request to write fields */

    apiFetch({
      path: path,
      method: 'POST',
      body: writeJSON,
      parse: false,
      headers: {
        'Content-type': 'application/json'
      }
    }).then(function (response) {
      return response.json();
    }).then(function (fields) {
      finishedWrite = true;
      write = fields;
      refreshPage();
    });
  }
  /* Makes the API request for the 'delete' action */


  function deleteData(dataToDelete) {
    if (dataToDelete.length === 0) {
      finishedDel = true;
      return;
    }

    var delJSON = JSON.stringify(dataToDelete);
    finishedDel = false;
    /* Launches the Rest request to delete fields */

    apiFetch({
      path: path,
      method: 'DELETE',
      body: delJSON,
      parse: false,
      headers: {
        'Content-type': 'application/json'
      }
    }).then(function (response) {
      return response.json();
    }).then(function (fields) {
      finishedDel = true;
      del = fields;
      refreshPage();
    });
  }

  function submitOptions(options) {
    var readLocal = [];
    var writeLocal = [];
    var delLocal = [];
    var newRead = {};
    var newWrite = {};
    var newDel = {};
    options.forEach(function (option) {
      if (option.action === 'read') {
        newRead = {
          index: option.index,
          optionName: option.optionName
        };
        readLocal.push(newRead);
      } else if (option.action === 'write') {
        newWrite = {
          index: option.index,
          optionName: option.optionName,
          emptyArray: option.emptyArray,
          valueToWrite: option.valueToWrite
        };
        writeLocal.push(newWrite);
      } else if (option.action === 'delete') {
        newDel = {
          index: option.index,
          optionName: option.optionName
        };
        delLocal.push(newDel);
      }
    });
    finishedRead = false;
    readData(readLocal);
    finishedWrite = false;
    writeData(writeLocal);
    finishedDel = false;
    deleteData(delLocal);
  }

  function requestSubmit(e) {
    e.preventDefault();
    submitOptions(form);
  }
  /* Initializes the form at the first page load.
  * Gets the array containing the previous options stored in the DB */


  Object(react__WEBPACK_IMPORTED_MODULE_2__["useEffect"])(function () {
    var readJSON = JSON.stringify('all');
    /* Launches the Rest request to read fields */

    apiFetch({
      path: "".concat(path, "?all_options=").concat(readJSON),
      method: 'GET',
      parse: false
    }).then(function (response) {
      return response.json();
    }).then(function (metaFields) {
      var formTemp = [];
      setRows(metaFields); // eslint-disable-next-line array-callback-return

      metaFields.map(function (row, index) {
        formTemp[index] = {
          index: row.index,
          optionName: row.fieldName,
          emptyArray: '',
          action: 'read',
          valueToWrite: ''
        };
      });
      setForm(formTemp); // After we get the previous options from the DB we must refresh them to get their current value.
      // The state variable 'form' is available only at the next refresh so in order to avoid passing an empty parameter
      // now we have to pass the current variable

      submitOptions(formTemp);
    });
  }, []);
  /* Called from downstream when the user manipulates the form fields.
  * This form is what is sent to the server when the user clicks the 'read/write values' button */

  var updateForm = Object(react__WEBPACK_IMPORTED_MODULE_2__["useCallback"])(function (formRow) {
    var temp = {
      index: formRow.index,
      optionName: formRow.optionName,
      emptyArray: formRow.emptyArray,
      action: formRow.action,
      valueToWrite: formRow.valueToWrite
    };
    var formTemp = form;
    formTemp[formRow.rowIndex] = temp;
    setForm(formTemp);
  }, [form]);
  /* After a REST request is made to the backend, the state variable 'resetPage' restores */

  function restoreEvent() {
    setResetPage(false);
  }

  var addRemoveMetaRows = Object(react__WEBPACK_IMPORTED_MODULE_2__["useCallback"])(function (index, content) {
    if (content === '+') {
      var lastElement = rows[rows.length - 1];
      var newRow = {
        fieldID: false,
        fieldName: '',
        index: parseInt(lastElement.index, 10) + 1,
        currentValueDateToggle: 'is-hidden',
        currentValue: JSON.stringify(''),
        disableDelete: '',
        disableWrite: '',
        error: '',
        previousValue: JSON.stringify(''),
        rowErrorClass: ''
      };
      setRows([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(rows), [newRow]));
    } else {
      var rowIndex = rows.findIndex(function (row) {
        return row.index === parseInt(index, 10);
      });
      rows.splice(rowIndex, 1);
      setRows(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(rows));
    }
  }, [rows]);
  return wp.element.createElement(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment, null, wp.element.createElement("div", {
    className: "js-optionsMetaSection o-meta"
  }, wp.element.createElement(_components_OptionsMetaHeaders_js__WEBPACK_IMPORTED_MODULE_3__["default"], {
    className: "c-optionsMetaHeaders"
  }), rows.map(function (row, index) {
    var arrowTitle = 'Add another row';
    var arrowContent = '+';

    if (index + 1 < rows.length) {
      arrowTitle = 'Remove the next row';
      arrowContent = '-';
    }

    return wp.element.createElement(_components_OptionsMetaRow_js__WEBPACK_IMPORTED_MODULE_4__["default"], {
      className: "js-optionFieldDataRow c-optionField",
      rowIndex: index,
      dataIndex: row.index,
      fieldName: row.fieldName,
      errorClass: row.rowErrorClass,
      errorMessage: row.error,
      currentValue: JSON.parse(row.currentValue),
      previousValue: JSON.parse(row.previousValue),
      disableWrite: row.disableWrite,
      disableDelete: row.disableDelete,
      arrowTitle: arrowTitle,
      arrowContent: arrowContent,
      arrowClick: addRemoveMetaRows,
      rowChange: updateForm,
      resetPage: resetPage,
      restoreEvent: restoreEvent
    });
  })), wp.element.createElement("input", {
    className: "js-submitOptions c-metaSubmitButton button button-primary",
    type: "submit",
    name: "submit_options",
    value: "Read/Write Values",
    onClick: requestSubmit
  }));
}

/* harmony default export */ __webpack_exports__["default"] = (TabOptionsMeta);

/***/ }),

/***/ "./src/js/tabs-render.js":
/*!*******************************!*\
  !*** ./src/js/tabs-render.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ "react-dom");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _tab_options_meta_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tab-options-meta.js */ "./src/js/tab-options-meta.js");

/* eslint-disable import/extensions */

 // eslint-disable-next-line react/jsx-filename-extension,react/react-in-jsx-scope

Object(react_dom__WEBPACK_IMPORTED_MODULE_0__["render"])(wp.element.createElement(_tab_options_meta_js__WEBPACK_IMPORTED_MODULE_1__["default"], null), document.querySelector('#optionsMetaSection'));

/***/ }),

/***/ "./src/js/user-meta-actions.js":
/*!*************************************!*\
  !*** ./src/js/user-meta-actions.js ***!
  \*************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions.js */ "./src/js/functions.js");
/* harmony import */ var _add_remove_meta_row_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-remove-meta-row.js */ "./src/js/add-remove-meta-row.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-disable function-paren-newline */
// eslint-disable-next-line import/extensions
 // eslint-disable-next-line import/extensions

 // eslint-disable-next-line no-undef

var _wp = wp,
    apiFetch = _wp.apiFetch;
var submitUserFieldsButton = document.querySelector('.js-submitUserFields');
var renameUserFieldsButton = document.querySelector('.js-submitRenameUserField');
var copyUserFieldsButton = document.querySelector('.js-submitCopyUserField');
var read = [];
var write = [];
var del = [];
var finishedWrite = false;
var finishedRead = false;
var finishedDel = false;
var restBase = 'user_fields';
var renameBase = "".concat(restBase, "/rename");
var copyBase = "".concat(restBase, "/copy");
var path = "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(restBase);
/* Get the fields whose action is selected to 'write' */

function getWriteFields(row) {
  var index = row.dataset.index;
  var userID = row.querySelector("input[name=\"user_id[".concat(index, "]\"]")).value;
  var fieldName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  var emptyArray = row.querySelector('.js-emptyArray').checked;
  var valueToWrite = row.querySelector('.js-metaFieldInputValue').value;
  var newValue = {
    index: index,
    userID: userID,
    fieldName: fieldName,
    emptyArray: emptyArray,
    valueToWrite: valueToWrite
  };
  write.push(newValue);
}
/* Get the fields whose action is selected to 'delete' */


function getDeleteFields(row) {
  var index = row.dataset.index;
  var userID = row.querySelector("input[name=\"user_id[".concat(index, "]\"]")).value;
  var fieldName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  var newValue = {
    index: index,
    userID: userID,
    fieldName: fieldName
  };
  del.push(newValue);
}
/* Get the fields whose action is selected to 'read' */


function readFields(row) {
  var index = row.dataset.index;
  var userID = row.querySelector("input[name=\"user_id[".concat(index, "]\"]")).value;
  var fieldName = row.querySelector("input[name=\"field_name[".concat(index, "]\"]")).value;
  var newValue = {
    index: index,
    userID: userID,
    fieldName: fieldName
  };
  read.push(newValue);
}
/* Refresh the page of the meta fields with the data received */


function refreshPage(fields) {
  // eslint-disable-next-line no-restricted-syntax
  var _iterator = _createForOfIteratorHelper(fields),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var field = _step.value;
      var index = field.index;
      var row = document.querySelector(".js-userFieldsDataRow[data-index=\"".concat(index, "\"]")); // add/remove the red-dotted border

      if (field.error === '') {
        row.classList.remove('is-error');
      } else {
        row.classList.add('is-error');
      }

      row.querySelector('.js-fieldAction[value="read"]').click();
      row.querySelector('.js-fieldAction[value="write"]').disabled = field.disableWrite === 'disabled';

      if (field.disableDelete === 'disabled') {
        row.querySelector('.js-fieldAction[value="delete"]').disabled = true;
      } else {
        row.querySelector('.js-fieldAction[value="delete"]').disabled = false;
      } // manages the error message


      var fieldErrorMessage = row.querySelector('.js-fieldErrorMessage');

      if (field.fieldErrorClass === '') {
        fieldErrorMessage.classList.add('is-hidden');
      } else {
        fieldErrorMessage.classList.remove('is-hidden');
        fieldErrorMessage.innerHTML = field.error;
      } // manages the empty array checkbox


      var emptyArrayCheckbox = row.querySelector('.js-emptyArray');
      emptyArrayCheckbox.checked = false;
      emptyArrayCheckbox.disabled = true; // manages the date string checkbox

      var dateStringCheckbox = row.querySelector('.js-dateString');
      dateStringCheckbox.checked = false;
      dateStringCheckbox.disabled = true; // input value box

      var metaFieldInputValue = row.querySelector('.js-metaFieldInputValue');
      metaFieldInputValue.value = '';
      metaFieldInputValue.disabled = true; // Current value

      var fieldCurrentValue = row.querySelector('.js-fieldCurrentValue');
      fieldCurrentValue.innerHTML = JSON.parse(field.currentValue); // Current value date-string option

      var currentValueDateToggle = row.querySelector('.js-curValueDateToggle');

      if (field.curValueDateToggle === 'is-visible') {
        currentValueDateToggle.classList.add('is-visible');
        currentValueDateToggle.classList.remove('is-hidden');
      } else {
        currentValueDateToggle.classList.remove('is-visible');
        currentValueDateToggle.classList.add('is-hidden');
      } // Previous value


      var fieldPreviousValue = row.querySelector('.js-fieldPreviousValue');
      fieldPreviousValue.innerHTML = JSON.parse(field.previousValue);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (finishedWrite && finishedRead && finishedDel) {
    submitUserFieldsButton.disabled = false;
    submitUserFieldsButton.blur();
    Object(_add_remove_meta_row_js__WEBPACK_IMPORTED_MODULE_1__["refreshUserArrows"])();
    Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();
    finishedWrite = false;
    finishedRead = false;
    finishedDel = false;
  }
}
/* Makes the API request for the 'read' action */


function readData() {
  if (read.length === 0) {
    finishedRead = true;
    return;
  }

  var readJSON = JSON.stringify(read);
  finishedRead = false;
  /* Launches the Rest request to read fields */

  apiFetch({
    path: "".concat(path, "?user_fields=").concat(readJSON),
    method: 'GET',
    parse: false
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    finishedRead = true;
    refreshPage(fields);
  });
}
/* Makes the API request for the 'write' action */


function writeData() {
  if (write.length === 0) {
    finishedWrite = true;
    return;
  }

  var writeJSON = JSON.stringify(write);
  finishedWrite = false;
  /* Launches the Rest request to write fields */

  apiFetch({
    path: path,
    method: 'POST',
    body: writeJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    finishedWrite = true;
    refreshPage(fields);
  });
}
/* Makes the API request for the 'delete' action */


function deleteData() {
  if (del.length === 0) {
    finishedDel = true;
    return;
  }

  var delJSON = JSON.stringify(del);
  finishedDel = false;
  /* Launches the Rest request to delete fields */

  apiFetch({
    path: path,
    method: 'DELETE',
    body: delJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    finishedDel = true;
    refreshPage(fields);
  });
}
/* Gets the content of the form for the 'read|write|delete' actions */


function getMetaForm(e) {
  e.preventDefault();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  submitUserFieldsButton.disabled = true;
  write = [];
  read = [];
  del = [];
  var rows = document.querySelectorAll('.js-userFieldsDataRow');
  /* Reads all the rows and fill in the request objects */
  // eslint-disable-next-line no-restricted-syntax

  var _iterator2 = _createForOfIteratorHelper(rows),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var row = _step2.value;
      var fieldAction = row.querySelector('.js-fieldAction:checked').value;

      if (fieldAction === 'write') {
        getWriteFields(row);
      }

      if (fieldAction === 'delete') {
        getDeleteFields(row);
      }

      if (fieldAction === 'read') {
        readFields(row);
      }
    }
    /* Once all the rows have been read, launches the actions */

  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  readData();
  writeData();
  deleteData();
}
/* Refresh the rename section if the action has been completed successfully */


function refreshRenamePage(fields) {
  var lightbox;
  var userID = document.querySelector('.js-userFieldRenameUserID');
  var oldFieldName = document.querySelector('.js-oldUserFieldName');
  var newFieldName = document.querySelector('.js-newUserFieldName');

  if (!fields.renamed) {
    lightbox = new Lightbox({
      openAnimation: 'jelly',
      closeAnimation: 'collapse'
    });
    lightbox.setTitle('ERROR');
  } else {
    lightbox = new Lightbox({
      openAnimation: 'fadein',
      closeAnimation: 'shrink'
    });
    lightbox.setTitle('Done'); // eslint-disable-next-line no-param-reassign

    userID.value = ''; // eslint-disable-next-line no-param-reassign

    oldFieldName.value = ''; // eslint-disable-next-line no-param-reassign

    newFieldName.value = '';
  }

  lightbox.setContent(fields.message);
  lightbox.open();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();
  renameUserFieldsButton.disabled = false;
}
/* Gets the content of the form for the 'rename' action */


function getRenameForm(e) {
  e.preventDefault();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  renameUserFieldsButton.disabled = true;
  var userID = document.querySelector('.js-userFieldRenameUserID').value;
  var oldFieldName = document.querySelector('.js-oldUserFieldName').value;
  var newFieldName = document.querySelector('.js-newUserFieldName').value;
  /* Prepares the object for the Rest request */

  var rename = {
    userID: userID,
    oldFieldName: oldFieldName,
    newFieldName: newFieldName
  };
  var renameJSON = JSON.stringify(rename);
  /* Launches the Rest request to rename fields */

  apiFetch({
    path: "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(renameBase),
    method: 'POST',
    body: renameJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    refreshRenamePage(fields);
  });
}
/* Refresh the copy section if the action has been completed successfully */


function refreshCopyPage(fields, copySelection) {
  var checkboxCreate;
  var newOption;
  var userID;
  var userField;
  var postID;
  var postField;
  var lightbox;
  var currentUserID = document.querySelector('.js-userFieldCopyUserID');
  var currentUserField = document.querySelector('.js-userFieldCopyFieldName');

  if (fields.copied) {
    currentUserID.value = '';
    currentUserField.value = '';
    lightbox = new Lightbox({
      openAnimation: 'fadein',
      closeAnimation: 'shrink'
    });
    lightbox.setTitle('Done');

    switch (copySelection) {
      case 'option':
        newOption = document.querySelector('.js-userFieldToOptionName');
        checkboxCreate = document.querySelector('.js-userFieldToOptionCreate');
        newOption.value = '';
        checkboxCreate.checked = false;
        break;

      case 'user field':
        userID = document.querySelector('.js-userFieldToUserFieldID');
        userField = document.querySelector('.js-userFieldToUserFieldName');
        checkboxCreate = document.querySelector('.js-userFieldToUserFieldCreate');
        userID.value = '';
        userField.value = '';
        checkboxCreate.checked = false;
        break;

      case 'post field':
        postID = document.querySelector('.js-userFieldToPostFieldID');
        postField = document.querySelector('.js-userFieldToPostFieldName');
        checkboxCreate = document.querySelector('.js-userFieldToPostFieldCreate');
        postID.value = '';
        postField.value = '';
        checkboxCreate.checked = false;
        break;

      default:
    }
  } else {
    lightbox = new Lightbox({
      openAnimation: 'jelly',
      closeAnimation: 'collapse'
    });
    lightbox.setTitle('ERROR');
  }

  lightbox.setContent(fields.message);
  lightbox.open();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOff"])();
  copyUserFieldsButton.disabled = false;
}
/* Gets the content of the form for the 'copy' action */


function getCopyForm(e) {
  e.preventDefault();
  Object(_functions_js__WEBPACK_IMPORTED_MODULE_0__["spinnerOn"])();
  copyUserFieldsButton.disabled = true;
  var copy;
  var checkboxCreate;
  var newOption;
  var userID;
  var userField;
  var postID;
  var postField;
  var currentUserID = document.querySelector('.js-userFieldCopyUserID').value;
  var currentFieldName = document.querySelector('.js-userFieldCopyFieldName').value;
  var copySelection = document.querySelector('input[type=radio][name=copy_user_field_to]:checked').value;
  /* Checks where we must copy the user field to and prepares the appropriate object for the Rest request */

  switch (copySelection) {
    case 'option':
      newOption = document.querySelector('.js-userFieldToOptionName').value;
      checkboxCreate = document.querySelector('.js-userFieldToOptionCreate').checked;
      copy = {
        currentUserID: currentUserID,
        currentFieldName: currentFieldName,
        copySelection: copySelection,
        newOption: newOption,
        checkboxCreate: checkboxCreate
      };
      break;

    case 'user field':
      userID = document.querySelector('.js-userFieldToUserFieldID').value;
      userField = document.querySelector('.js-userFieldToUserFieldName').value;
      checkboxCreate = document.querySelector('.js-userFieldToUserFieldCreate').checked;
      copy = {
        currentUserID: currentUserID,
        currentFieldName: currentFieldName,
        copySelection: copySelection,
        userID: userID,
        userField: userField,
        checkboxCreate: checkboxCreate
      };
      break;

    case 'post field':
      postID = document.querySelector('.js-userFieldToPostFieldID').value;
      postField = document.querySelector('.js-userFieldToPostFieldName').value;
      checkboxCreate = document.querySelector('.js-userFieldToPostFieldCreate').checked;
      copy = {
        currentUserID: currentUserID,
        currentFieldName: currentFieldName,
        copySelection: copySelection,
        postID: postID,
        postField: postField,
        checkboxCreate: checkboxCreate
      };
      break;

    default:
  }

  var copyJSON = JSON.stringify(copy);
  /* Launches the Rest request to copy fields */

  apiFetch({
    path: "".concat(_functions_js__WEBPACK_IMPORTED_MODULE_0__["nameSpace"], "/").concat(copyBase),
    method: 'POST',
    body: copyJSON,
    parse: false,
    headers: {
      'Content-type': 'application/json'
    }
  }).then(function (response) {
    return response.json();
  }).then(function (fields) {
    refreshCopyPage(fields, copySelection);
  });
}

submitUserFieldsButton.addEventListener('click', getMetaForm, false);
renameUserFieldsButton.addEventListener('click', getRenameForm, false);
copyUserFieldsButton.addEventListener('click', getCopyForm, true);

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = React;

/***/ }),

/***/ "react-dom":
/*!***************************!*\
  !*** external "ReactDOM" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ReactDOM;

/***/ })

/******/ });
//# sourceMappingURL=custom-fields-tools.min.js.map